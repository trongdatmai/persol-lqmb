{"version":3,"sources":["contextAPI/index.js","polyfill.js","App.js","serviceWorker.js","index.js"],"names":["initializeContext","progress","account","JSON","parse","localStorage","getItem","RootContext","React","createContext","window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","DefaultLayout","lazy","Login","Register","Page404","Page500","App","useState","state","setState","Provider","value","stateAPI","changeStatusProgress","s","prev","changeState","ns","setItem","stringify","Suspense","fallback","className","exact","path","name","render","props","checkAuth","to","pathname","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4KAAA,sDAEMA,EAAoB,CACtBC,UAAU,EACVC,QAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,OAGrDC,EAAcC,IAAMC,gBAIXF,O,qiECoBf,WAEE,GAAmC,oBAAvBG,OAAOC,YAA6B,OAAO,EAEvD,SAASA,EAAcC,EAAOC,GAC5BA,EAASA,GAAU,CAAEC,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChE,IAAIC,EAAMC,SAASC,YAAa,eAEhC,OADAF,EAAIG,gBAAiBT,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC/DE,EAGTP,EAAYW,UAAYZ,OAAOa,MAAMD,UAErCZ,OAAOC,YAAcA,EAbvB,G,oHClBA,IAKMa,EAAgBhB,IAAMiB,MAAK,kBAAM,wDAGjCC,EAAQlB,IAAMiB,MAAK,kBAAM,gEACzBE,EAAWnB,IAAMiB,MAAK,kBAAM,gEAC5BG,EAAUpB,IAAMiB,MAAK,kBAAM,yDAC3BI,EAAUrB,IAAMiB,MAAK,kBAAM,yDAwElBK,EAjEH,WAAO,IAAD,EACUC,mBAAS/B,KADnB,mBACTgC,EADS,KACFC,EADE,KAYhB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAYC,SAAb,CAAsBC,MAAO,CAAEC,SAAUJ,EAAOK,qBAXvB,SAAAC,GAC3BL,GAAS,SAAAM,GAAI,sBAAUA,EAAV,CAAgBtC,SAAUqC,QAUiCE,YAPtD,SAACC,GACnBR,GAAS,SAAAM,GAAI,sBAAUA,EAAV,GAAmBE,MAChCpC,aAAaqC,QAAQ,UAAWvC,KAAKwC,UAAUF,OAM3C,kBAAC,aAAD,KACE,kBAAC,IAAMG,SAAP,CAAgBC,SAjCxB,yBAAKC,UAAU,oCAAf,eAkCU,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,SACLC,KAAK,aACLC,OAAQ,SAAAC,GAAK,OAAI,kBAACzB,EAAUyB,MAE9B,kBAAC,IAAD,CACEJ,OAAK,EACLC,KAAK,YACLC,KAAK,gBACLC,OAAQ,SAAAC,GAAK,OAAI,kBAACxB,EAAawB,MAEjC,kBAAC,IAAD,CACEJ,OAAK,EACLC,KAAK,OACLC,KAAK,WACLC,OAAQ,SAAAC,GAAK,OAAI,kBAACvB,EAAYuB,MAEhC,kBAAC,IAAD,CACEJ,OAAK,EACLC,KAAK,OACLC,KAAK,WACLC,OAAQ,SAAAC,GAAK,OAAI,kBAACtB,EAAYsB,MAEhC,kBAAC,IAAD,CACEH,KAAK,IACLC,KAAK,OACLC,OAAQ,SAAAC,GACN,OAnDA,WAChB,IAAMjD,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,MAC9D,MAAmC,OAA5BH,KAAKwC,UAAUzC,GAiDCkD,GACL,kBAAC5B,EAAkB2B,GAEnB,kBAAC,IAAD,CACEE,GAAI,CACFC,SAAU,qBCxEdC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCNNC,IAAST,OAAO,kBAAC,EAAD,MAAS/B,SAASyC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1a476c33.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst initializeContext = {\r\n    progress: false,\r\n    account: JSON.parse(localStorage.getItem('account') || '{}')\r\n}\r\n\r\nconst RootContext = React.createContext();\r\nexport  {\r\n    initializeContext\r\n}\r\nexport default RootContext;","/*\r\n* required polyfills\r\n*/\r\nimport \"core-js\";\r\nimport 'core-js/features/set/map';\r\n\r\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\r\n// import 'core-js/es6/symbol'\r\n// import 'core-js/es6/object'\r\n// import 'core-js/es6/function'\r\n// import 'core-js/es6/parse-int'\r\n// import 'core-js/es6/parse-float'\r\n// import 'core-js/es6/number'\r\n// import 'core-js/es6/math'\r\n// import 'core-js/es6/string'\r\n// import 'core-js/es6/date'\r\n// import 'core-js/es6/array'\r\n// import 'core-js/es6/regexp'\r\n// import 'core-js/es6/map'\r\n// import 'core-js/es6/weak-map'\r\n// import 'core-js/es6/set'\r\n// import 'core-js/es7/object'\r\n\r\n/** IE10 and IE11 requires the following for the Reflect API. */\r\n// import 'core-js/es6/reflect'\r\n\r\n/** Evergreen browsers require these. **/\r\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\r\n// import 'core-js/es7/reflect'\r\n\r\n// CustomEvent() constructor functionality in IE9, IE10, IE11\r\n(function () {\r\n\r\n  if ( typeof window.CustomEvent === \"function\" ) return false\r\n\r\n  function CustomEvent ( event, params ) {\r\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\r\n    var evt = document.createEvent( 'CustomEvent' )\r\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\r\n    return evt\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype\r\n\r\n  window.CustomEvent = CustomEvent\r\n})()\r\n","import React, { Component, useReducer, useState } from \"react\";\r\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\n// import { renderRoutes } from 'react-router-config';\r\nimport \"./App.scss\";\r\nimport { FirebaseDatabaseProvider } from \"@react-firebase/database\";\r\nimport RootContext, { initializeContext } from \"./contextAPI\";\r\nimport ReactGA from 'react-ga';\r\n\r\nfunction initializeReactGA() {\r\n  ReactGA.initialize('UA-123791717-1');\r\n  ReactGA.pageview('/homepage');\r\n}\r\n\r\nconst loading = () => (\r\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\r\n);\r\n\r\n// Containers\r\nconst DefaultLayout = React.lazy(() => import(\"./containers/DefaultLayout\"));\r\n\r\n// Pages\r\nconst Login = React.lazy(() => import(\"./views/Pages/Login\"));\r\nconst Register = React.lazy(() => import(\"./views/Pages/Register\"));\r\nconst Page404 = React.lazy(() => import(\"./views/Pages/Page404\"));\r\nconst Page500 = React.lazy(() => import(\"./views/Pages/Page500\"));\r\n\r\nconst checkAuth = () => {\r\n  const account = JSON.parse(localStorage.getItem(\"account\") || \"{}\");\r\n  return JSON.stringify(account) !== \"{}\";\r\n};\r\n\r\nconst App = () => {\r\n  const [state, setState] = useState(initializeContext);\r\n\r\n  const changeStatusProgress = s => {\r\n    setState(prev => ({ ...prev, progress: s }));\r\n  };\r\n\r\n  const changeState = (ns) => {\r\n    setState(prev => ({ ...prev, ...ns }));\r\n    localStorage.setItem(\"account\", JSON.stringify(ns));\r\n  };\r\n\r\n  return (\r\n    <FirebaseDatabaseProvider>\r\n      <RootContext.Provider value={{ stateAPI: state, changeStatusProgress, changeState }}>\r\n        <HashRouter>\r\n          <React.Suspense fallback={loading()}>\r\n            <Switch>\r\n              <Route\r\n                exact\r\n                path=\"/login\"\r\n                name=\"Login Page\"\r\n                render={props => <Login {...props} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/register\"\r\n                name=\"Register Page\"\r\n                render={props => <Register {...props} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/404\"\r\n                name=\"Page 404\"\r\n                render={props => <Page404 {...props} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/500\"\r\n                name=\"Page 500\"\r\n                render={props => <Page500 {...props} />}\r\n              />\r\n              <Route\r\n                path=\"/\"\r\n                name=\"Home\"\r\n                render={props => {\r\n                  return checkAuth() ? (\r\n                    <DefaultLayout {...props} />\r\n                  ) : (\r\n                    <Redirect\r\n                      to={{\r\n                        pathname: \"/login\"\r\n                      }}\r\n                    />\r\n                  );\r\n                }}\r\n              />\r\n            </Switch>\r\n          </React.Suspense>\r\n        </HashRouter>\r\n      </RootContext.Provider>\r\n    </FirebaseDatabaseProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\r\nimport 'react-app-polyfill/stable';\r\n// import 'react-app-polyfill/ie11'; // For IE 11 support\r\nimport './polyfill'\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
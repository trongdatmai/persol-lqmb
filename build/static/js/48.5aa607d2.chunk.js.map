{"version":3,"sources":["../node_modules/reactstrap/es/Button.js","config.js","components/Profile/index.js"],"names":["propTypes","active","PropTypes","bool","string","block","color","disabled","outline","tag","tagPropType","innerRef","oneOfType","object","func","onClick","size","children","node","className","cssModule","close","Button","_React$Component","props","_this","call","this","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","e","preventDefault","render","_this$props","ariaLabel","Tag","attributes","_objectWithoutPropertiesLoose","React","createElement","btnOutlineColor","classes","mapToCssModules","classNames","href","defaultAriaLabel","_extends","type","undefined","ref","Component","defaultProps","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","RegExp","Profile","changeStatusProgress","changeState","database","useState","JSON","parse","localStorage","getItem","account","setAccount","keyAccount","setKeyAccount","isSave","setSave","useEffect","orderByChild","equalTo","username","on","snapshot","val","Object","values","acc","keys","renderPointLane","lane","role","p","findIndex","i","toLowerCase","xs","sm","htmlFor","readOnly","value","id","placeholder","ingame","onChange","target","prev","row","md","check","checked","some","length","filter","name","rank","avatar","src","alt","style","width","border","col","a","async","child","update"],"mappings":"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","file":"static/js/48.5aa607d2.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  active: PropTypes.bool,\n  'aria-label': PropTypes.string,\n  block: PropTypes.bool,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  outline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  onClick: PropTypes.func,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  close: PropTypes.bool\n};\nvar defaultProps = {\n  color: 'secondary',\n  tag: 'button'\n};\n\nvar Button =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Button, _React$Component);\n\n  function Button(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Button.prototype;\n\n  _proto.onClick = function onClick(e) {\n    if (this.props.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.onClick) {\n      this.props.onClick(e);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        ariaLabel = _this$props['aria-label'],\n        block = _this$props.block,\n        className = _this$props.className,\n        close = _this$props.close,\n        cssModule = _this$props.cssModule,\n        color = _this$props.color,\n        outline = _this$props.outline,\n        size = _this$props.size,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"active\", \"aria-label\", \"block\", \"className\", \"close\", \"cssModule\", \"color\", \"outline\", \"size\", \"tag\", \"innerRef\"]);\n\n    if (close && typeof attributes.children === 'undefined') {\n      attributes.children = React.createElement(\"span\", {\n        \"aria-hidden\": true\n      }, \"\\xD7\");\n    }\n\n    var btnOutlineColor = \"btn\" + (outline ? '-outline' : '') + \"-\" + color;\n    var classes = mapToCssModules(classNames(className, {\n      close: close\n    }, close || 'btn', close || btnOutlineColor, size ? \"btn-\" + size : false, block ? 'btn-block' : false, {\n      active: active,\n      disabled: this.props.disabled\n    }), cssModule);\n\n    if (attributes.href && Tag === 'button') {\n      Tag = 'a';\n    }\n\n    var defaultAriaLabel = close ? 'Close' : null;\n    return React.createElement(Tag, _extends({\n      type: Tag === 'button' && attributes.onClick ? 'button' : undefined\n    }, attributes, {\n      className: classes,\n      ref: innerRef,\n      onClick: this.onClick,\n      \"aria-label\": ariaLabel || defaultAriaLabel\n    }));\n  };\n\n  return Button;\n}(React.Component);\n\nButton.propTypes = propTypes;\nButton.defaultProps = defaultProps;\nexport default Button;","import firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyDBF8amla_vjNklDN4EeieSM9Y4dj87OTU\",\r\n  authDomain: \"persol-lqmb.firebaseapp.com\",\r\n  databaseURL: \"https://persol-lqmb.firebaseio.com\",\r\n  projectId: \"persol-lqmb\",\r\n  storageBucket: \"persol-lqmb.appspot.com\",\r\n  messagingSenderId: \"18719045844\",\r\n  appId: \"1:18719045844:web:267353846c47f3dbaee341\",\r\n  measurementId: \"G-82D3GSXG4D\"\r\n};\r\n\r\n// var firebaseConfig = {\r\n//   apiKey: \"AIzaSyAKlfuUNlBR95laYX0ndWHSrHyZ2p1sfto\",\r\n//   authDomain: \"test-db-dbb9b.firebaseapp.com\",\r\n//   databaseURL: \"https://test-db-dbb9b.firebaseio.com\",\r\n//   projectId: \"test-db-dbb9b\",\r\n//   storageBucket: \"test-db-dbb9b.appspot.com\",\r\n//   messagingSenderId: \"714708611588\",\r\n//   appId: \"1:714708611588:web:fda8b14e5ff2bed82e7b51\",\r\n//   measurementId: \"G-FX8CDKFY0S\"\r\n// };\r\n\r\nexport default firebase.initializeApp(firebaseConfig);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Row,\r\n  Button,\r\n  CardImg,\r\n  Badge\r\n} from \"reactstrap\";\r\nimport firebase from \"./../../config\";\r\n\r\nconst base64Matcher = new RegExp(\"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\");\r\n\r\nconst Profile = ({ changeStatusProgress, changeState }) => {\r\n  const ref = firebase.database();\r\n  const [account, setAccount] = useState(\r\n    JSON.parse(localStorage.getItem(\"account\") || \"{}\")\r\n  );\r\n  const [keyAccount, setKeyAccount] = useState(\"\");\r\n  const [isSave, setSave] = useState(false);\r\n\r\n  useEffect(() => {\r\n    changeStatusProgress(true);\r\n    ref\r\n      .ref(\"users\")\r\n      .orderByChild(\"username\")\r\n      .equalTo(account.username)\r\n      .on(\"value\", snapshot => {\r\n        if (snapshot.val() !== null) {\r\n          const [acc] = Object.values(snapshot.val());\r\n          setAccount(acc);\r\n          setKeyAccount(Object.keys(snapshot.val()));\r\n        }\r\n        changeStatusProgress(false);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSave(false);\r\n  }, [account]);\r\n\r\n  const updateProfile = async () => {\r\n    changeStatusProgress(true);\r\n    ref\r\n      .ref()\r\n      .child(\"/users/\" + keyAccount)\r\n      .update(account, () => {\r\n        setSave(true);\r\n        changeState(account);\r\n        changeStatusProgress(false);\r\n      });\r\n  };\r\n\r\n  const renderPointLane = (lane) => {\r\n    if(!account.role) return;\r\n    const p = account.role.findIndex(i => i.toLowerCase() === lane.toLowerCase())\r\n    if(p !== -1) return 5 - p\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs=\"12\" sm=\"12\">\r\n        <Card>\r\n          <CardHeader>\r\n            <strong>Profile</strong>\r\n            <small> Form</small>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <FormGroup>\r\n              <Label htmlFor=\"company\">Username</Label>\r\n              <Input type=\"text\" readOnly={true} value={account.username} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label htmlFor=\"Ingame\">Ingame</Label>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"Ingame\"\r\n                placeholder=\"PS.abcxyz\"\r\n                value={account.ingame}\r\n                onChange={({ target: { value } }) =>\r\n                  setAccount(prev => ({\r\n                    ...prev,\r\n                    ingame: value\r\n                  }))\r\n                }\r\n              />\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Col md=\"12\">\r\n                <Label>Role</Label>\r\n              </Col>\r\n              <Col md=\"12\">\r\n                <FormGroup check className=\"checkbox\">\r\n                  <Input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"Top\"\r\n                    checked={\r\n                      account.role && account.role.some(i => i === \"top\")\r\n                    }\r\n                    onChange={({ target: { checked } }) =>\r\n                      setAccount(prev =>\r\n                        checked\r\n                          ? account.role && account.role.length\r\n                            ? ({ ...prev, role: [...account.role, \"top\"] })\r\n                            : ({ ...prev, role: [\"top\"] })\r\n                          : ({\r\n                              ...prev,\r\n                              role: [...account.role].filter(i => i !== \"top\")\r\n                            })\r\n                      )\r\n                    }\r\n                  />\r\n                  <Label check className=\"form-check-label\" htmlFor=\"Top\">\r\n                    Top <Badge color=\"success\">{renderPointLane(\"Top\")}</Badge>\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check className=\"checkbox\">\r\n                  <Input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"Jungle\"\r\n                    checked={\r\n                      account.role && account.role.some(i => i === \"jungle\")\r\n                    }\r\n                    onChange={({ target: { checked } }) =>\r\n                    setAccount(prev =>\r\n                        checked\r\n                          ? account.role && account.role.length\r\n                            ? ({ ...prev, role: [...account.role, \"jungle\"] })\r\n                            : ({ ...prev, role: [\"jungle\"] })\r\n                          : ({\r\n                              ...prev,\r\n                              role: [...account.role].filter(i => i !== \"jungle\")\r\n                            })\r\n                      )\r\n                    }\r\n                  />\r\n                  <Label check className=\"form-check-label\" htmlFor=\"Jungle\">\r\n                    Jungle <Badge color=\"success\">{renderPointLane(\"Jungle\")}</Badge>\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check className=\"checkbox\">\r\n                  <Input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"Mid\"\r\n                    checked={\r\n                      account.role && account.role.some(i => i === \"mid\")\r\n                    }\r\n                    onChange={({ target: { checked } }) =>\r\n                    setAccount(prev =>\r\n                        checked\r\n                          ? account.role && account.role.length\r\n                            ? ({ ...prev, role: [...account.role, \"mid\"] })\r\n                            : ({ ...prev, role: [\"mid\"] })\r\n                          : ({\r\n                              ...prev,\r\n                              role: [...account.role].filter(i => i !== \"mid\")\r\n                            })\r\n                      )\r\n                    }\r\n                  />\r\n                  <Label check className=\"form-check-label\" htmlFor=\"Mid\">\r\n                    Mid <Badge color=\"success\">{renderPointLane(\"Mid\")}</Badge>\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check className=\"checkbox\">\r\n                  <Input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"Ad\"\r\n                    checked={account.role && account.role.some(i => i === \"ad\")}\r\n                    onChange={({ target: { checked } }) =>\r\n                    setAccount(prev =>\r\n                        checked\r\n                          ? account.role && account.role.length\r\n                            ? ({ ...prev, role: [...account.role, \"ad\"] })\r\n                            : ({ ...prev, role: [\"ad\"] })\r\n                          : ({\r\n                              ...prev,\r\n                              role: [...account.role].filter(i => i !== \"ad\")\r\n                            })\r\n                      )\r\n                    }\r\n                  />\r\n                  <Label check className=\"form-check-label\" htmlFor=\"Ad\">\r\n                    Ad <Badge color=\"success\">{renderPointLane(\"Ad\")}</Badge>\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check className=\"checkbox\">\r\n                  <Input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"Support\"\r\n                    checked={\r\n                      account.role && account.role.some(i => i === \"support\")\r\n                    }\r\n                    onChange={({ target: { checked } }) =>\r\n                        setAccount(prev =>\r\n                            checked\r\n                            ? account.role && account.role.length\r\n                                ? ({ ...prev, role: [...account.role, \"support\"] })\r\n                                : ({ ...prev, role: [\"support\"] })\r\n                            : ({\r\n                                ...prev,\r\n                                role: [...account.role].filter(i => i !== \"support\")\r\n                                })\r\n                        )\r\n                    }\r\n                  />\r\n                  <Label check className=\"form-check-label\" htmlFor=\"Support\">\r\n                    Support <Badge color=\"success\">{renderPointLane(\"Support\")}</Badge>\r\n                  </Label>\r\n                </FormGroup>\r\n              </Col>\r\n            </FormGroup>\r\n\r\n            <FormGroup row>\r\n              <Col md=\"12\">\r\n                <Label htmlFor=\"select\">Rank</Label>\r\n              </Col>\r\n              <Col xs=\"12\" md=\"12\">\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"select\"\r\n                  id=\"select\"\r\n                  value={account.rank}\r\n                  onChange={({ target: { value } }) =>\r\n                    setAccount(prev => ({ ...prev, rank: value }))\r\n                  }\r\n                >\r\n                  <option value=\"\">Please select</option>\r\n                  <option value=\"Bronze\">Bronze</option>\r\n                  <option value=\"Silver\">Silver</option>\r\n                  <option value=\"Gold\">Gold</option>\r\n                  <option value=\"Platinum\">Platinum</option>\r\n                  <option value=\"Diamond\">Diamond</option>\r\n                  <option value=\"Veteran\">Veteran</option>\r\n                  <option value=\"Master\">Master</option>\r\n                  <option value=\"Challenger\">Challenger</option>\r\n                </Input>\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label htmlFor=\"Avatar\">Avatar </Label>\r\n              <small>(Url)</small>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"Avatar\"\r\n                placeholder=\"https://pornhub.com/avatar/MariaOzawa\"\r\n                value={account.avatar}\r\n                onChange={({ target: { value } }) =>\r\n                  setAccount(prev => ({\r\n                    ...prev,\r\n                    avatar: value\r\n                  }))\r\n                }\r\n              />\r\n              {account.avatar && (\r\n                <>\r\n                  <br />\r\n                  <Label htmlFor=\"Avatar\">Preview </Label>\r\n                  <br />\r\n                  <CardImg\r\n                    src={account.avatar}\r\n                    alt=\"avatar\"\r\n                    style={{\r\n                      width: \"200px\",\r\n                      border: \"5px solid rgba(0,0,0, .4)\"\r\n                    }}\r\n                  />\r\n                </>\r\n              )}\r\n            </FormGroup>\r\n            <Row>\r\n              <Col col=\"6\" sm=\"4\" md=\"2\" className=\"mb-3 mb-xl-0\">\r\n                <Button\r\n                  block\r\n                  color={isSave ? \"success\" : \"primary\"}\r\n                  disabled={isSave}\r\n                  onClick={updateProfile}\r\n                >\r\n                  {isSave ? \"Success ✓\" : \"Save\"}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"sourceRoot":""}
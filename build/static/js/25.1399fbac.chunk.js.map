{"version":3,"sources":["config.js","components/Dashboard/components/assets/images/first.svg","components/Dashboard/components/assets/images/second.svg","components/Dashboard/components/assets/images/third.svg","components/Dashboard/components/assets/images/diamond.svg","views/Widgets/Widget01.js","views/Widgets/Widget04.js","components/Dashboard/components/W1.js","components/Dashboard/components/T1.js","components/Dashboard/components/T2.js","components/Dashboard/components/T3.js","components/Dashboard/components/T4.js","components/Dashboard/components/W2.js","components/Dashboard/components/W3.js","components/Dashboard/components/W4.js","components/Dashboard/index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","module","exports","Widget01","this","props","className","cssModule","header","mainText","smallText","color","value","children","variant","attributes","progress","style","card","bgColor","classes","mapToCssModules","classNames","Component","defaultProps","Widget04","icon","invert","account","historyMatchs","t1","t4","t2","t3","Row","Col","sm","md","length","toString","weekNumber","moment","dateMatch","week","dateWork","format","parseFloat","toFixed","calcAvgMatchOfWeek","ingame","win","lose","Table","responsive","textAlign","map","t","i","key","Badge","r","CardImg","width","src","First","alt","Second","Third","Diamond","ranking","avatar","useState","activeTab","setActiveTab","toggle","tab","xs","lg","Card","CardHeader","CardBody","Nav","tabs","NavItem","NavLink","classnames","active","onClick","TabContent","TabPane","tabId","T4","T1","T2","T3","myAccount","JSON","parse","localStorage","getItem","statisticWLPlayers","find","e","username","name","setName","statisticChooseName","totalMatchs","player","filter","chooseAccount","renderStatistic","rs","w","l","sortStatisticWin","Object","values","reduce","acc","cur","index","sortStatisticLose","FormGroup","row","Label","htmlFor","Input","type","id","onChange","target","keys","s","marginBottom","Progress","animated","height","matchsForName","blueTeam","some","search","redTeam","checkBlueTeamWinGame","team","checkRedTeamWinGame","statisticForGame","tmp","winSequenceTmp","winSequence","data","labels","splice","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","CardTitle","CardFooter","parseInt","Dashboard","changeStatusProgress","ref","database","setAccount","setHistoryMatchs","fecthStatus","setFecthStatus","objTmp","h","p","split","sort","a","b","initFunc","snapshotUsers","once","snapshotMatchs","Promise","all","users","matchs","val","useEffect","W1","W2","W3","W4"],"mappings":"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","file":"static/js/25.1399fbac.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyDBF8amla_vjNklDN4EeieSM9Y4dj87OTU\",\r\n  authDomain: \"persol-lqmb.firebaseapp.com\",\r\n  databaseURL: \"https://persol-lqmb.firebaseio.com\",\r\n  projectId: \"persol-lqmb\",\r\n  storageBucket: \"persol-lqmb.appspot.com\",\r\n  messagingSenderId: \"18719045844\",\r\n  appId: \"1:18719045844:web:267353846c47f3dbaee341\",\r\n  measurementId: \"G-82D3GSXG4D\"\r\n};\r\n\r\n// var firebaseConfig = {\r\n//   apiKey: \"AIzaSyAKlfuUNlBR95laYX0ndWHSrHyZ2p1sfto\",\r\n//   authDomain: \"test-db-dbb9b.firebaseapp.com\",\r\n//   databaseURL: \"https://test-db-dbb9b.firebaseio.com\",\r\n//   projectId: \"test-db-dbb9b\",\r\n//   storageBucket: \"test-db-dbb9b.appspot.com\",\r\n//   messagingSenderId: \"714708611588\",\r\n//   appId: \"1:714708611588:web:fda8b14e5ff2bed82e7b51\",\r\n//   measurementId: \"G-FX8CDKFY0S\"\r\n// };\r\n\r\nexport default firebase.initializeApp(firebaseConfig);\r\n","module.exports = __webpack_public_path__ + \"static/media/first.ae5fcc83.svg\";","module.exports = __webpack_public_path__ + \"static/media/second.7f4cae36.svg\";","module.exports = __webpack_public_path__ + \"static/media/third.a034b65e.svg\";","module.exports = __webpack_public_path__ + \"static/media/diamond.ee1b923f.svg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, CardBody, Progress } from 'reactstrap';\r\nimport classNames from 'classnames';\r\nimport { mapToCssModules } from 'reactstrap/lib/utils';\r\n\r\nconst propTypes = {\r\n  header: PropTypes.string,\r\n  mainText: PropTypes.string,\r\n  smallText: PropTypes.string,\r\n  color: PropTypes.string,\r\n  value: PropTypes.string,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  variant: PropTypes.string,\r\n};\r\n\r\nconst defaultProps = {\r\n  header: '89.9%',\r\n  mainText: 'Lorem ipsum...',\r\n  smallText: 'Lorem ipsum dolor sit amet enim.',\r\n  // color: '',\r\n  value: '25',\r\n  variant: '',\r\n};\r\n\r\nclass Widget01 extends Component {\r\n  render() {\r\n    const { className, cssModule, header, mainText, smallText, color, value, children, variant, ...attributes } = this.props;\r\n\r\n    // demo purposes only\r\n    const progress = { style: '', color: color, value: value };\r\n    const card = { style: '', bgColor: '' };\r\n\r\n    if (variant === 'inverse') {\r\n      progress.style = 'progress-white';\r\n      progress.color = '';\r\n      card.style = 'text-white';\r\n      card.bgColor = 'bg-' + color;\r\n    }\r\n\r\n    const classes = mapToCssModules(classNames(className, card.style, card.bgColor), cssModule);\r\n    progress.style = classNames('progress-xs my-3', progress.style);\r\n\r\n    return (\r\n      <Card className={classes} {...attributes}>\r\n        <CardBody>\r\n          <div className=\"h4 m-0\">{header}</div>\r\n          <div>{mainText}</div>\r\n          <Progress className={progress.style} color={progress.color} value={progress.value} />\r\n          <small className=\"text-muted\">{smallText}</small>\r\n          <div>{children}</div>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nWidget01.propTypes = propTypes;\r\nWidget01.defaultProps = defaultProps;\r\n\r\nexport default Widget01;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, CardBody, Progress } from 'reactstrap';\r\nimport classNames from 'classnames';\r\nimport { mapToCssModules } from 'reactstrap/lib/utils';\r\n\r\nconst propTypes = {\r\n  header: PropTypes.string,\r\n  icon: PropTypes.string,\r\n  color: PropTypes.string,\r\n  value: PropTypes.string,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  invert: PropTypes.bool,\r\n};\r\n\r\nconst defaultProps = {\r\n  header: '87.500',\r\n  icon: 'icon-people',\r\n  color: 'info',\r\n  value: '25',\r\n  children: 'Visitors',\r\n  invert: false,\r\n};\r\n\r\nclass Widget04 extends Component {\r\n  render() {\r\n    const { className, cssModule, header, icon, color, value, children, invert, ...attributes } = this.props;\r\n\r\n    // demo purposes only\r\n    const progress = { style: '', color: color, value: value };\r\n    const card = { style: '', bgColor: '', icon: icon };\r\n\r\n    if (invert) {\r\n      progress.style = 'progress-white';\r\n      progress.color = '';\r\n      card.style = 'text-white';\r\n      card.bgColor = 'bg-' + color;\r\n    }\r\n\r\n    const classes = mapToCssModules(classNames(className, card.style, card.bgColor), cssModule);\r\n    progress.style = classNames('progress-xs mt-3 mb-0', progress.style);\r\n\r\n    return (\r\n      <Card className={classes} {...attributes}>\r\n        <CardBody>\r\n          <div className=\"h1 text-muted text-right mb-2\">\r\n            <i className={card.icon}></i>\r\n          </div>\r\n          <div className=\"h4 mb-0\">{header}</div>\r\n          <small className=\"text-muted text-uppercase font-weight-bold\">{children}</small>\r\n          <Progress className={progress.style} color={progress.color} value={progress.value} />\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nWidget04.propTypes = propTypes;\r\nWidget04.defaultProps = defaultProps;\r\n\r\nexport default Widget04;","import React from 'react'\r\nimport Widget04 from './../../../views/Widgets/Widget04';\r\nimport { Col, Row } from 'reactstrap';\r\nimport moment from 'moment'\r\n\r\nexport default ({ account, historyMatchs, t1, t2, t3, t4 }) => {\r\n\r\n    const calcAvgMatchOfWeek = () => {\r\n        const weekNumber = moment(historyMatchs[0].dateMatch, \"YYYY-MM-DD\").week();\r\n        const weekCurrent = moment(moment().format(\"YYYY-MM-DD\"), \"YYYY-MM-DD\").week();\r\n        const dateWork = (weekCurrent - weekNumber) * 5;\r\n        return parseFloat(historyMatchs.length / dateWork).toFixed(2)\r\n    }\r\n    \r\n    return <Row>\r\n        <Col sm=\"12\" md=\"4\">\r\n            <Widget04 icon=\"icon-people\" color=\"info\" header={account.length.toString()} value=\"100\">Player</Widget04>\r\n        </Col>\r\n        <Col sm=\"12\" md=\"4\">\r\n            <Widget04 icon=\"icon-game-controller\" color=\"success\" header={historyMatchs.length.toString()} value={historyMatchs.length.toString()}>Matchs</Widget04>\r\n        </Col>\r\n        <Col sm=\"12\" md=\"4\">\r\n            <Widget04 icon=\"icon-hourglass\" color=\"warning\" header={calcAvgMatchOfWeek().toString()} value=\"25\">Avg. Matchs of Week</Widget04>\r\n        </Col>\r\n        <Col sm=\"12\" md=\"4\">\r\n            <Widget04 icon=\"icon-speedometer\" color=\"primary\" header={t1()[0].ingame.toString() + \" (\" + (~~((t1()[0].win + t1()[0].lose) / historyMatchs.length * 100)) + \"%)\"} value={( (t1()[0].win + t1()[0].lose) / historyMatchs.length * 100).toString()}>Most played</Widget04>\r\n        </Col>\r\n        <Col sm=\"12\" md=\"4\">\r\n            <Widget04 icon=\"icon-like\" color=\"success\" header={t4()[0].ingame.toString() + \" (\" + (~~(t4()[0].win / (t4()[0].win + t4()[0].lose) * 100)).toString() + \"%)\"} value={(t4()[0].win / (t4()[0].win + t4()[0].lose) * 100).toString()}>Highest Win Rate</Widget04>\r\n        </Col>\r\n        <Col sm=\"12\" md=\"4\">\r\n            <Widget04 icon=\"icon-dislike\" color=\"danger\" header={t4()[t4().length - 1].ingame.toString() + \" (\"+ (~~(t4()[t4().length - 1].win / (t4()[t4().length - 1].win + t4()[t4().length - 1].lose) * 100)).toString() + \"%)\"} value={(t4()[t4().length - 1].win / (t4()[t4().length - 1].win + t4()[t4().length - 1].lose) * 100).toString()}>Highest Loss Rate</Widget04>\r\n        </Col>\r\n    </Row>\r\n}","import React from 'react'\r\nimport { Badge, Table, CardImg } from 'reactstrap';\r\nimport First from './assets/images/first.svg';\r\nimport Second from './assets/images/second.svg';\r\nimport Third from './assets/images/third.svg';\r\nimport Diamond from './assets/images/diamond.svg';\r\n\r\nexport default ({ t1 }) => {\r\n    const ranking = (r) => {\r\n        switch (r) {\r\n            case 0: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={First}\r\n                alt=\"avatar\"\r\n            />\r\n            case 1: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={Second}\r\n                alt=\"avatar\"\r\n            />\r\n            case 2: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={Third}\r\n                alt=\"avatar\"\r\n            />\r\n            default: return <CardImg\r\n                style={{ width: \"18px\" }}\r\n                src={Diamond}\r\n                alt=\"avatar\"\r\n            />\r\n        }\r\n    }\r\n    return <Table responsive style={{textAlign: 'center'}}>\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>Rank medal</th>\r\n                <th>Avatar</th>\r\n                <th>Username</th>\r\n                <th>Number of matches</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {\r\n                t1.map((t, i) => {\r\n                    return <tr key={t.ingame}>\r\n                        <td><Badge color=\"success\">{i + 1}</Badge></td>\r\n                        <td>{ranking(i)}</td>\r\n                        <td>\r\n                            <CardImg\r\n                                style={{ width: \"30px\" }}\r\n                                src={t.avatar}\r\n                                alt=\"avatar\"\r\n                            />\r\n                        </td>\r\n                        <td><Badge color=\"success\">{t.ingame}</Badge></td>\r\n                        <td>\r\n                            <Badge color=\"success\">{t.lose + t.win}</Badge>\r\n                        </td>\r\n                    </tr>\r\n                })\r\n            }\r\n\r\n        </tbody>\r\n    </Table>\r\n}","import React from 'react'\r\nimport { Badge, Table, CardImg } from 'reactstrap';\r\nimport First from './assets/images/first.svg';\r\nimport Second from './assets/images/second.svg';\r\nimport Third from './assets/images/third.svg';\r\nimport Diamond from './assets/images/diamond.svg';\r\n\r\nexport default ({ t2 }) => {\r\n    const ranking = (r) => {\r\n        switch (r) {\r\n            case 0: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={First}\r\n                alt=\"avatar\"\r\n            />\r\n            case 1: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={Second}\r\n                alt=\"avatar\"\r\n            />\r\n            case 2: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={Third}\r\n                alt=\"avatar\"\r\n            />\r\n            default: return <CardImg\r\n                style={{ width: \"18px\" }}\r\n                src={Diamond}\r\n                alt=\"avatar\"\r\n            />\r\n        }\r\n    }\r\n    return <Table responsive style={{textAlign: 'center'}}>\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>Rank medal</th>\r\n                <th>Avatar</th>\r\n                <th>Username</th>\r\n                <th>Number of wins</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {\r\n                t2.map((t, i) => {\r\n                    return <tr key={t.ingame}>\r\n                        <td><Badge color=\"success\">{i + 1}</Badge></td>\r\n                        <td>{ranking(i)}</td>\r\n                        <td>\r\n                            <CardImg\r\n                                style={{ width: \"30px\" }}\r\n                                src={t.avatar}\r\n                                alt=\"avatar\"\r\n                            />\r\n                        </td>\r\n                        <td><Badge color=\"success\">{t.ingame}</Badge></td>\r\n                        <td>\r\n                            <Badge color=\"success\">{t.win}</Badge>\r\n                        </td>\r\n                    </tr>\r\n                })\r\n            }\r\n\r\n        </tbody>\r\n    </Table>\r\n}","import React from 'react'\r\nimport { Badge, Table, CardImg } from 'reactstrap';\r\nimport First from './assets/images/first.svg';\r\nimport Second from './assets/images/second.svg';\r\nimport Third from './assets/images/third.svg';\r\nimport Diamond from './assets/images/diamond.svg';\r\n\r\nexport default ({ t3 }) => {\r\n    const ranking = (r) => {\r\n        switch (r) {\r\n            case 0: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={First}\r\n                alt=\"avatar\"\r\n            />\r\n            case 1: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={Second}\r\n                alt=\"avatar\"\r\n            />\r\n            case 2: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={Third}\r\n                alt=\"avatar\"\r\n            />\r\n            default: return <CardImg\r\n                style={{ width: \"18px\" }}\r\n                src={Diamond}\r\n                alt=\"avatar\"\r\n            />\r\n        }\r\n    }\r\n    return <Table responsive style={{textAlign: 'center'}}>\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>Rank medal</th>\r\n                <th>Avatar</th>\r\n                <th>Username</th>\r\n                <th>Number of losing matches</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {\r\n                t3.map((t, i) => {\r\n                    return <tr key={t.ingame}>\r\n                        <td><Badge color=\"success\">{i + 1}</Badge></td>\r\n                        <td>{ranking(i)}</td>\r\n                        <td>\r\n                            <CardImg\r\n                                style={{ width: \"30px\" }}\r\n                                src={t.avatar}\r\n                                alt=\"avatar\"\r\n                            />\r\n                        </td>\r\n                        <td><Badge color=\"success\">{t.ingame}</Badge></td>\r\n                        <td>\r\n                            <Badge color=\"success\">{t.lose}</Badge>\r\n                        </td>\r\n                    </tr>\r\n                })\r\n            }\r\n\r\n        </tbody>\r\n    </Table>\r\n}","import React from 'react'\r\nimport { Badge, Table, CardImg } from 'reactstrap';\r\nimport First from './assets/images/first.svg';\r\nimport Second from './assets/images/second.svg';\r\nimport Third from './assets/images/third.svg';\r\nimport Diamond from './assets/images/diamond.svg';\r\n\r\nexport default ({ t4 }) => {\r\n    const ranking = (r) => {\r\n        switch (r) {\r\n            case 0: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={First}\r\n                alt=\"avatar\"\r\n            />\r\n            case 1: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={Second}\r\n                alt=\"avatar\"\r\n            />\r\n            case 2: return <CardImg\r\n                style={{ width: \"30px\" }}\r\n                src={Third}\r\n                alt=\"avatar\"\r\n            />\r\n            default: return <CardImg\r\n                style={{ width: \"18px\" }}\r\n                src={Diamond}\r\n                alt=\"avatar\"\r\n            />\r\n        }\r\n    }\r\n    return <Table responsive style={{textAlign: 'center'}}>\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>Rank medal</th>\r\n                <th>Avatar</th>\r\n                <th>Username</th>\r\n                <th>Win rate (%)</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {\r\n                t4.map((t, i) => {\r\n                    return <tr key={t.ingame}>\r\n                        <td><Badge color=\"success\">{i + 1}</Badge></td>\r\n                        <td>{ranking(i)}</td>\r\n                        <td>\r\n                            <CardImg\r\n                                style={{ width: \"30px\" }}\r\n                                src={t.avatar}\r\n                                alt=\"avatar\"\r\n                            />\r\n                        </td>\r\n                        <td><Badge color=\"success\">{t.ingame}</Badge></td>\r\n                        <td>\r\n                            <Badge color=\"success\">{(~~((t.win / (t.win + t.lose)) * 100 || 0))} %</Badge>\r\n                        </td>\r\n                    </tr>\r\n                })\r\n            }\r\n\r\n        </tbody>\r\n    </Table>\r\n}","import React, { useState } from 'react'\r\nimport classnames from 'classnames';\r\nimport { Card, CardBody, CardHeader, Col, Row, TabContent, TabPane, Nav, NavItem, NavLink, Button, CardTitle, CardText } from 'reactstrap';\r\nimport T1 from './T1';\r\nimport T2 from './T2';\r\nimport T3 from './T3';\r\nimport T4 from './T4';\r\n\r\nexport default ({ t1, t2, t3, t4 }) => {\r\n  const [activeTab, setActiveTab] = useState('1');\r\n\r\n  const toggle = tab => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  }\r\n\r\n  return <div className=\"animated fadeIn\">\r\n    <Row>\r\n      <Col xs=\"12\" lg=\"12\">\r\n        <Card>\r\n          <CardHeader>\r\n            <i className=\"fa fa-align-justify\"></i> Statistic Matchs\r\n          </CardHeader>\r\n          <CardBody>\r\n            <div>\r\n              <Nav tabs>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({ active: activeTab === '1' })}\r\n                    onClick={() => { toggle('1'); }}\r\n                  >\r\n                    Win rates\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({ active: activeTab === '2' })}\r\n                    onClick={() => { toggle('2'); }}\r\n                  >\r\n                    Number of matches\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({ active: activeTab === '3' })}\r\n                    onClick={() => { toggle('3'); }}\r\n                  >\r\n                    Number of wins\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({ active: activeTab === '4' })}\r\n                    onClick={() => { toggle('4'); }}\r\n                  >\r\n                    Number of losing\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n              <TabContent activeTab={activeTab}>\r\n                <TabPane tabId=\"1\">\r\n                  <T4 t4={t4()} />\r\n                </TabPane>\r\n                <TabPane tabId=\"2\">\r\n                  <T1 t1={t1()} />\r\n                </TabPane>\r\n                <TabPane tabId=\"3\">\r\n                  <T2 t2={t2()} />\r\n                </TabPane>\r\n                <TabPane tabId=\"4\">\r\n                  <T3 t3={t3()} />\r\n                </TabPane>\r\n              </TabContent>\r\n            </div>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  </div>\r\n}","import React, { useState } from 'react'\r\nimport { Card, CardBody, CardHeader, Col, Row, FormGroup, Label, Input, Progress } from 'reactstrap';\r\nimport Widget01 from './../../../views/Widgets/Widget01';\r\n\r\nlet myAccount = JSON.parse(localStorage.getItem('account') || '{}');\r\n\r\nexport default ({ account, statisticWLPlayers }) => {\r\n  myAccount = account.find(e => e.username === myAccount.username)\r\n  const [name, setName] = useState(myAccount.ingame);\r\n  const statisticChooseName = statisticWLPlayers[name]\r\n\r\n  const totalMatchs = () => {\r\n    if (!account.length || !name) return;\r\n    const player = [...account].filter(e => e.ingame === name)[0]\r\n    return player.win + player.lose\r\n  }\r\n\r\n  const chooseAccount = account.find(e => e.ingame === name)\r\n\r\n  const renderStatistic = () => {\r\n    if (!name) return;\r\n    let rs = {}\r\n    const w = statisticChooseName.win\r\n    const l = statisticChooseName.lose\r\n    for (let i in w) {\r\n      rs = { ...rs, [i]: { win: w[i], lose: 0 } }\r\n    }\r\n    for (let i in l) {\r\n      rs = { ...rs, [i]: { win: 0, ...rs[i], lose: l[i] } }\r\n    }\r\n    return rs\r\n  }\r\n const sortStatisticWin = Object.values(renderStatistic()).reduce((acc, cur, index) => cur.win >= acc.w ? acc = { w: cur.win, i: index} : acc, { w: 0, i: 0})\r\n const sortStatisticLose = Object.values(renderStatistic()).reduce((acc, cur, index) => cur.lose >= acc.l ? acc = { l: cur.lose, i: index} : acc, { l: 0, i: 0})\r\n\r\n  return <div className=\"animated fadeIn\">\r\n    <Row>\r\n      <Col xs=\"12\" lg=\"12\">\r\n        <Card>\r\n          <CardHeader>\r\n            <i className=\"fa fa-align-justify\"></i> Statistic Players\r\n          </CardHeader>\r\n          <CardBody>\r\n            <Row>\r\n              <Col xs={12}>\r\n                <FormGroup row>\r\n                  <Col xs=\"12\" md=\"12\">\r\n                    <Label htmlFor=\"select\">choose the player</Label>\r\n                  </Col>\r\n                  <Col xs=\"12\" md=\"4\">\r\n                    <Input type=\"select\" value={name} name=\"select\" id=\"select\" onChange={e => setName(e.target.value)}>\r\n                      {\r\n                        account.map(acc => {\r\n                          return <option value={acc.ingame} key={acc.ingame}>{acc.ingame}</option>\r\n                        })\r\n                      }\r\n                    </Input>\r\n                  </Col>\r\n                </FormGroup>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n            <Col xs=\"12\" md=\"4\">\r\n              <Widget01 color=\"primary\" value={(chooseAccount.win / (chooseAccount.win + chooseAccount.lose) * 100).toString()} variant=\"inverse\" header={\"Matchs: \" + totalMatchs()} mainText={\"Win: \" + chooseAccount.win + \"\\n Lose: \" + chooseAccount.lose} smallText=\"\"/>\r\n            </Col>\r\n            <Col xs=\"12\" md=\"4\">\r\n              <Widget01 color=\"success\" variant=\"inverse\" header={\"Outstanding teammate: \"} mainText={ Object.keys(renderStatistic())[sortStatisticWin.i] + \" - Win: \" + sortStatisticWin.w} smallText=\"\"/>\r\n            </Col>\r\n            <Col xs=\"12\" md=\"4\">\r\n            <Widget01 color=\"danger\" variant=\"inverse\" header={\"Lousy teammate: \"} mainText={Object.keys(renderStatistic())[sortStatisticLose.i] + \" - Lose: \" + sortStatisticLose.l} smallText=\"\"/>\r\n            </Col>\r\n\r\n            </Row>\r\n            {\r\n              name !== '' && Object.keys(renderStatistic()).map((s, index) => {\r\n                return <Row key={s} style={{ marginBottom: 15 }} >\r\n                  <Col xs=\"12\" md=\"3\">\r\n                    {s}\r\n                  </Col>\r\n                  <Col xs=\"12\" md=\"9\">\r\n                    <Progress animated color=\"success\" value={(Object.values(renderStatistic())[index].win / totalMatchs()) * 100} style={{ height: 10, marginBottom: 7 }} >{Object.values(renderStatistic())[index].win}</Progress>\r\n                    <Progress animated color=\"danger\" value={(Object.values(renderStatistic())[index].lose / totalMatchs()) * 100} style={{ height: 10 }}>{Object.values(renderStatistic())[index].lose}</Progress>\r\n                  </Col>\r\n                </Row>\r\n              })\r\n            }\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  </div>\r\n}","import React, { useState } from 'react'\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardFooter,\r\n    CardTitle,\r\n    Col,\r\n    Progress,\r\n    Row,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    CardHeader\r\n} from 'reactstrap';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nlet myAccount = JSON.parse(localStorage.getItem('account') || '{}');\r\n\r\nexport default ({ account, historyMatchs }) => {\r\n    myAccount = account.find(e => e.username === myAccount.username)\r\n    \r\n    const [name, setName] = useState(myAccount.ingame);\r\n    const chooseAccount = account.find(e => e.ingame === name)\r\n\r\n    const matchsForName = [...historyMatchs].filter(i => i.blueTeam.some(e => { return e.search(name) !== -1 }) || i.redTeam.some(e => { return e.search(name) !== -1 }))\r\n    const checkBlueTeamWinGame = (win, team) => team.some(e => { return e.search(name) !== -1 }) && win === 'blueTeam'\r\n    const checkRedTeamWinGame = (win, team) => team.some(e => { return e.search(name) !== -1 }) && win === 'redTeam'\r\n    const statisticForGame = [...matchsForName].reduce((acc, cur) => {\r\n        acc = !!acc[cur.dateMatch] ?\r\n            {\r\n                ...acc, [cur.dateMatch]:\r\n                    checkBlueTeamWinGame(cur.win, cur.blueTeam) || checkRedTeamWinGame(cur.win, cur.redTeam)\r\n                        ? { ...acc[cur.dateMatch], win: acc[cur.dateMatch].win + 1 }\r\n                        : { ...acc[cur.dateMatch], lose: acc[cur.dateMatch].lose + 1 }\r\n            }\r\n            : {\r\n                ...acc, [cur.dateMatch]:\r\n                    checkBlueTeamWinGame(cur.win, cur.blueTeam) || checkRedTeamWinGame(cur.win, cur.redTeam)\r\n                        ? { lose: 0, win: 1 }\r\n                        : { win: 0, lose: 1 }\r\n            }\r\n        let tmp = acc.winSequenceTmp\r\n        if(checkBlueTeamWinGame(cur.win, cur.blueTeam) || checkRedTeamWinGame(cur.win, cur.redTeam)) {\r\n            tmp += 1\r\n        } else {\r\n            tmp = 0\r\n        }\r\n        acc = tmp > acc.winSequence ? {...acc, winSequence: tmp, winSequenceTmp: tmp} : {...acc, winSequenceTmp: tmp}\r\n        return acc\r\n    }, {winSequence: 0, winSequenceTmp: 0})\r\n\r\n\r\n    const data = {\r\n        labels: [...Object.keys(statisticForGame)].splice(2, Object.keys(statisticForGame).length - 1),\r\n        datasets: [\r\n            {\r\n                label: 'Win match',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: '#4dbd74 ',\r\n                borderColor: '#4dbd74 ',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: '#4dbd74 ',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: '#4dbd74 ',\r\n                pointHoverBorderColor: '#4dbd74 ',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: Object.values(statisticForGame).splice(2, Object.keys(statisticForGame).length - 1).map(i => i.win)\r\n            },\r\n            {\r\n                label: 'Losing match',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: '#FF3030',\r\n                borderColor: '#FF3030',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: '#FF3030',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: '#FF3030',\r\n                pointHoverBorderColor: '#FF3030',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: Object.values(statisticForGame).splice(2, Object.keys(statisticForGame).length - 1).map(i => i.lose)\r\n            }\r\n        ]\r\n    };\r\n\r\n    return <Row>\r\n        <Col>\r\n            <Card>\r\n            <CardHeader>\r\n                <i className=\"fa fa-align-justify\"></i> Statistic Chart\r\n            </CardHeader>\r\n                <CardBody>\r\n                    <Row style={{ marginBottom: 20 }}>\r\n                        <Col sm=\"5\">\r\n                            <CardTitle className=\"mb-0\">Match history chart</CardTitle>\r\n                            <div className=\"small text-muted\">Persol Gaming 2020</div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col xs={12}>\r\n                            <FormGroup row>\r\n                                <Col xs=\"12\" md=\"12\">\r\n                                    <Label htmlFor=\"select\">choose the player</Label>\r\n                                </Col>\r\n                                <Col xs=\"12\" md=\"4\">\r\n                                    <Input type=\"select\" value={name} name=\"select\" id=\"select\" onChange={e => setName(e.target.value)}>\r\n                                        {\r\n                                            account.map(acc => {\r\n                                                return <option value={acc.ingame} key={acc.ingame}>{acc.ingame}</option>\r\n                                            })\r\n                                        }\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </Row>\r\n                    <div className=\"chart-wrapper\" >\r\n                        <Line data={data} />\r\n                    </div>\r\n                </CardBody>\r\n                <CardFooter>\r\n                    <Row className=\"text-center\">\r\n                        <Col sm={12} md className=\"mb-sm-2 mb-0\">\r\n                            <div className=\"text-muted\">Win match</div>\r\n                            <strong>{chooseAccount.win} <small>({~~(chooseAccount.win / (chooseAccount.win + chooseAccount.lose) * 100)}%)</small></strong>\r\n                            <Progress className=\"progress-xs mt-2\" color=\"success\" value={~~(chooseAccount.win / (chooseAccount.win + chooseAccount.lose) * 100)} />\r\n                        </Col>\r\n                        <Col sm={12} md className=\"mb-sm-2 mb-0 d-md-down-none\">\r\n                            <div className=\"text-muted\">Losing match</div>\r\n                            <strong>{chooseAccount.lose} <small>({~~(chooseAccount.lose / (chooseAccount.win + chooseAccount.lose) * 100) + 1}%)</small></strong>\r\n                            <Progress className=\"progress-xs mt-2\" color=\"danger\" value={~~(chooseAccount.lose / (chooseAccount.win + chooseAccount.lose) * 100) + 1} />\r\n                        </Col>\r\n                        <Col sm={12} md className=\"mb-sm-2 mb-0\">\r\n                            <div className=\"text-muted\">Total matchs:</div>\r\n                            <strong>{chooseAccount.lose + chooseAccount.win}</strong>\r\n                            <Progress className=\"progress-xs mt-2\" color=\"info\" value={chooseAccount.lose + chooseAccount.win} />\r\n                        </Col>\r\n                        <Col sm={12} md className=\"mb-sm-2 mb-0\">\r\n                            <div className=\"text-muted\">Total matchs(%): </div>\r\n                            <strong>{~~((parseInt(chooseAccount.lose) + parseInt(chooseAccount.win)) / parseInt(historyMatchs.length) * 100)}%</strong>\r\n                            <Progress className=\"progress-xs mt-2\" color=\"primary\" value={~~((parseInt(chooseAccount.lose) + parseInt(chooseAccount.win)) / parseInt(historyMatchs.length) * 100)} />\r\n                        </Col>\r\n                        <Col sm={12} md className=\"mb-sm-2 mb-0 d-md-down-none\">\r\n                            <div className=\"text-muted\">Longest winning streak</div>\r\n                            <strong>{statisticForGame.winSequence}</strong>\r\n                            <Progress className=\"progress-xs mt-2\" color=\"warning\" value=\"100\" />\r\n                        </Col>\r\n                    </Row>\r\n                </CardFooter>\r\n            </Card>\r\n        </Col>\r\n    </Row>\r\n}","import React, { useEffect, useState } from 'react'\r\nimport firebase from \"./../../config\";\r\nimport W1 from './components/W1';\r\nimport W2 from './components/W2';\r\nimport W3 from './components/W3';\r\nimport W4 from './components/W4';\r\n\r\nconst Dashboard = ({ changeStatusProgress }) => {\r\n    const ref = firebase.database();\r\n    const [account, setAccount] = useState([])\r\n    const [historyMatchs, setHistoryMatchs] = useState([])\r\n    const [fecthStatus, setFecthStatus] = useState(false)\r\n\r\n    const statisticWLPlayers = [...account].reduce((acc, cur) => {\r\n        const objTmp = { win: {}, lose: {} };\r\n        const {ingame} = cur\r\n        if(!cur || !historyMatchs) return;\r\n        historyMatchs.map(h => {\r\n            if(h.blueTeam.some(e => {return e.search(ingame) !== -1 })) {\r\n                if(h.win === 'blueTeam') {\r\n                    h.blueTeam.map(p => {\r\n                        p = p.split(' - ')[0]\r\n                        if(p !== ingame) {\r\n                            objTmp.win = !!objTmp.win[p] ? { ...objTmp.win, [p]: objTmp.win[p] + 1 } : { ...objTmp.win, [p]: 1 }\r\n                        }\r\n                    })\r\n                } else {\r\n                    h.blueTeam.map(p => {\r\n                        p = p.split(' - ')[0]\r\n                        if(p !== ingame) {\r\n                            objTmp.lose = !!objTmp.lose[p] ? { ...objTmp.lose, [p]: objTmp.lose[p] + 1 } : { ...objTmp.lose, [p]: 1 }\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            if(h.redTeam.some(e => { return e.search(ingame) !== -1})) {\r\n                if(h.win === 'redTeam') {\r\n                    h.redTeam.map(p => {\r\n                        p = p.split(' - ')[0]\r\n                        if(p !== ingame) {\r\n                            objTmp.win = !!objTmp.win[p] ? { ...objTmp.win, [p]: objTmp.win[p] + 1 } : { ...objTmp.win, [p]: 1 }\r\n                        }\r\n                    })\r\n                } else {\r\n                    h.redTeam.map(p => {\r\n                        p = p.split(' - ')[0]\r\n                        if(p !== ingame) {\r\n                            objTmp.lose = !!objTmp.lose[p] ? { ...objTmp.lose, [p]: objTmp.lose[p] + 1 } : { ...objTmp.lose, [p]: 1 }\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        return ({...acc, [cur.ingame]: objTmp})\r\n    }, {})\r\n\r\n    const t1 = () => {\r\n        return [...account].sort((a, b) => ((a.win + a.lose) < (b.win + b.lose) ? 1 : (a.win + a.lose) > (b.win + b.lose) ? -1 : 0))\r\n      }\r\n      const t2 = () => {\r\n        return [...account].sort((a, b) => ((a.win) < (b.win) ? 1 : (a.win) > (b.win) ? -1 : 0))\r\n      }\r\n    \r\n      const t3 = () => {\r\n        return [...account].sort((a, b) => ((a.lose) < (b.lose) ? 1 : (a.lose) > (b.lose) ? -1 : 0))\r\n      }\r\n    \r\n      const t4 = () => {\r\n        return [...account].sort((a, b) => ((~~((a.win / (a.win + a.lose)) * 100 || 0)) < (~~((b.win / (b.win + b.lose)) * 100 || 0)) ? 1 : (~~((a.win / (a.win + a.lose)) * 100 || 0)) > (~~((b.win / (b.win + b.lose)) * 100 || 0)) ? -1 : 0))\r\n      }\r\n    const initFunc = async () => {\r\n        const snapshotUsers = ref.ref(\"users\").once(\"value\")\r\n        const snapshotMatchs = ref.ref(\"historyMatch\").once(\"value\")\r\n        const [users, matchs] = await Promise.all([snapshotUsers, snapshotMatchs])\r\n        setAccount(Object.values(users.val()));\r\n        setHistoryMatchs(Object.values(matchs.val()));\r\n        setFecthStatus(true)\r\n        changeStatusProgress(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        changeStatusProgress(true)\r\n        initFunc();\r\n    }, [])\r\n\r\n    if (!fecthStatus) return null\r\n    return (<>\r\n        <div className=\"animated fadeIn\">\r\n            <W1 account={account} historyMatchs={historyMatchs} t1={t1} t2={t2} t3={t3} t4={t4}/>\r\n            <W2 account={account} historyMatchs={historyMatchs} t1={t1} t2={t2} t3={t3} t4={t4}/>\r\n            <W3 account={account} statisticWLPlayers={statisticWLPlayers} />\r\n            <W4 account={account} historyMatchs={historyMatchs}/>\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default Dashboard"],"sourceRoot":""}
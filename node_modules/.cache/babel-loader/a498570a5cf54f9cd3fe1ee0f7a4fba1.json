{"ast":null,"code":"/*! firebase-admin v8.9.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar validator = require(\"../utils/validator\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar auth_config_1 = require(\"./auth-config\");\n/**\n * Tenant class that defines a Firebase Auth tenant.\n */\n\n\nvar Tenant =\n/** @class */\nfunction () {\n  /**\n   * The Tenant object constructor.\n   *\n   * @param {any} response The server side response used to initialize the Tenant object.\n   * @constructor\n   */\n  function Tenant(response) {\n    var tenantId = Tenant.getTenantIdFromResourceName(response.name);\n\n    if (!tenantId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid tenant response');\n    }\n\n    this.tenantId = tenantId;\n    this.displayName = response.displayName;\n\n    try {\n      this.emailSignInConfig = new auth_config_1.EmailSignInConfig(response);\n    } catch (e) {\n      // If allowPasswordSignup is undefined, it is disabled by default.\n      this.emailSignInConfig = new auth_config_1.EmailSignInConfig({\n        allowPasswordSignup: false\n      });\n    }\n  }\n  /**\n   * Builds the corresponding server request for a TenantOptions object.\n   *\n   * @param {TenantOptions} tenantOptions The properties to convert to a server request.\n   * @param {boolean} createRequest Whether this is a create request.\n   * @return {object} The equivalent server request.\n   */\n\n\n  Tenant.buildServerRequest = function (tenantOptions, createRequest) {\n    Tenant.validate(tenantOptions, createRequest);\n    var request = {};\n\n    if (typeof tenantOptions.emailSignInConfig !== 'undefined') {\n      request = auth_config_1.EmailSignInConfig.buildServerRequest(tenantOptions.emailSignInConfig);\n    }\n\n    if (typeof tenantOptions.displayName !== 'undefined') {\n      request.displayName = tenantOptions.displayName;\n    }\n\n    return request;\n  };\n  /**\n   * Returns the tenant ID corresponding to the resource name if available.\n   *\n   * @param {string} resourceName The server side resource name\n   * @return {?string} The tenant ID corresponding to the resource, null otherwise.\n   */\n\n\n  Tenant.getTenantIdFromResourceName = function (resourceName) {\n    // name is of form projects/project1/tenants/tenant1\n    var matchTenantRes = resourceName.match(/\\/tenants\\/(.*)$/);\n\n    if (!matchTenantRes || matchTenantRes.length < 2) {\n      return null;\n    }\n\n    return matchTenantRes[1];\n  };\n  /**\n   * Validates a tenant options object. Throws an error on failure.\n   *\n   * @param {any} request The tenant options object to validate.\n   * @param {boolean} createRequest Whether this is a create request.\n   */\n\n\n  Tenant.validate = function (request, createRequest) {\n    var validKeys = {\n      displayName: true,\n      emailSignInConfig: true\n    };\n    var label = createRequest ? 'CreateTenantRequest' : 'UpdateTenantRequest';\n\n    if (!validator.isNonNullObject(request)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \"\\\" must be a valid non-null object.\");\n    } // Check for unsupported top level attributes.\n\n\n    for (var key in request) {\n      if (!(key in validKeys)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + key + \"\\\" is not a valid \" + label + \" parameter.\");\n      }\n    } // Validate displayName type if provided.\n\n\n    if (typeof request.displayName !== 'undefined' && !validator.isNonEmptyString(request.displayName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"\\\"\" + label + \".displayName\\\" must be a valid non-empty string.\");\n    } // Validate emailSignInConfig type if provided.\n\n\n    if (typeof request.emailSignInConfig !== 'undefined') {\n      // This will throw an error if invalid.\n      auth_config_1.EmailSignInConfig.buildServerRequest(request.emailSignInConfig);\n    }\n  };\n  /** @return {object} The plain object representation of the tenant. */\n\n\n  Tenant.prototype.toJSON = function () {\n    return {\n      tenantId: this.tenantId,\n      displayName: this.displayName,\n      emailSignInConfig: this.emailSignInConfig && this.emailSignInConfig.toJSON()\n    };\n  };\n\n  return Tenant;\n}();\n\nexports.Tenant = Tenant;","map":null,"metadata":{},"sourceType":"script"}
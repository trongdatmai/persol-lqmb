{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert = require(\"assert\");\n\nvar logger_1 = require(\"./logger\");\n/**\n * An auto-resizing pool that distributes concurrent operations over multiple\n * clients of type `T`.\n *\n * ClientPool is used within Firestore to manage a pool of GAPIC clients and\n * automatically initializes multiple clients if we issue more than 100\n * concurrent operations.\n *\n * @private\n */\n\n\nvar ClientPool =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param concurrentOperationLimit The number of operations that each client\n   * can handle.\n   * @param maxIdleClients The maximum number of idle clients to keep before\n   * garbage collecting.\n   * @param clientFactory A factory function called as needed when new clients\n   * are required.\n   * @param clientDestructor A cleanup function that is called when a client is\n   * disposed of.\n   */\n  function ClientPool(concurrentOperationLimit, maxIdleClients, clientFactory) {\n    var clientDestructor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {\n      return Promise.resolve();\n    };\n\n    _classCallCheck(this, ClientPool);\n\n    this.concurrentOperationLimit = concurrentOperationLimit;\n    this.maxIdleClients = maxIdleClients;\n    this.clientFactory = clientFactory;\n    this.clientDestructor = clientDestructor;\n    /**\n     * Stores each active clients and how many operations it has outstanding.\n     * @private\n     */\n\n    this.activeClients = new Map();\n    /**\n     * Whether the Firestore instance has been terminated. Once terminated, the\n     * ClientPool can longer schedule new operations.\n     */\n\n    this.terminated = false;\n  }\n  /**\n   * Returns an already existing client if it has less than the maximum number\n   * of concurrent operations or initializes and returns a new client.\n   *\n   * @private\n   */\n\n\n  _createClass(ClientPool, [{\n    key: \"acquire\",\n    value: function acquire(requestTag) {\n      var selectedClient = null;\n      var selectedClientRequestCount = -1;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.activeClients[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _ref3 = _step.value;\n\n          var _ref2 = _slicedToArray(_ref3, 2);\n\n          var client = _ref2[0];\n          var requestCount = _ref2[1];\n\n          // Use the \"most-full\" client that can still accommodate the request\n          // in order to maximize the number of idle clients as operations start to\n          // complete.\n          if (requestCount > selectedClientRequestCount && requestCount < this.concurrentOperationLimit) {\n            selectedClient = client;\n            selectedClientRequestCount = requestCount;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (selectedClient) {\n        logger_1.logger('ClientPool.acquire', requestTag, 'Re-using existing client with %s remaining operations', this.concurrentOperationLimit - selectedClientRequestCount);\n      } else {\n        logger_1.logger('ClientPool.acquire', requestTag, 'Creating a new client');\n        selectedClient = this.clientFactory();\n        selectedClientRequestCount = 0;\n        assert(!this.activeClients.has(selectedClient), 'The provided client factory returned an existing instance');\n      }\n\n      this.activeClients.set(selectedClient, selectedClientRequestCount + 1);\n      return selectedClient;\n    }\n    /**\n     * Reduces the number of operations for the provided client, potentially\n     * removing it from the pool of active clients.\n     * @private\n     */\n\n  }, {\n    key: \"release\",\n    value: function () {\n      var _release = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(requestTag, client) {\n        var requestCount;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                requestCount = this.activeClients.get(client) || 0;\n                assert(requestCount > 0, 'No active request');\n                this.activeClients.set(client, requestCount - 1);\n\n                if (!this.shouldGarbageCollectClient(client)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                this.activeClients.delete(client);\n                _context.next = 7;\n                return this.clientDestructor(client);\n\n              case 7:\n                logger_1.logger('ClientPool.release', requestTag, 'Garbage collected 1 client');\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function release(_x, _x2) {\n        return _release.apply(this, arguments);\n      }\n\n      return release;\n    }()\n    /**\n     * Given the current operation counts, determines if the given client should\n     * be garbage collected.\n     * @private\n     */\n\n  }, {\n    key: \"shouldGarbageCollectClient\",\n    value: function shouldGarbageCollectClient(client) {\n      if (this.activeClients.get(client) !== 0) {\n        return false;\n      }\n\n      var idleCapacityCount = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.activeClients[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _ref6 = _step2.value;\n\n          var _ref5 = _slicedToArray(_ref6, 2);\n\n          var _ = _ref5[0];\n          var count = _ref5[1];\n          idleCapacityCount += this.concurrentOperationLimit - count;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return idleCapacityCount > this.maxIdleClients * this.concurrentOperationLimit;\n    }\n    /**\n     * The number of currently registered clients.\n     *\n     * @return Number of currently registered clients.\n     * @private\n     */\n    // Visible for testing.\n\n  }, {\n    key: \"run\",\n\n    /**\n     * Runs the provided operation in this pool. This function may create an\n     * additional client if all existing clients already operate at the concurrent\n     * operation limit.\n     *\n     * @param requestTag A unique client-assigned identifier for this operation.\n     * @param op A callback function that returns a Promise. The client T will\n     * be returned to the pool when callback finishes.\n     * @return A Promise that resolves with the result of `op`.\n     * @private\n     */\n    value: function run(requestTag, op) {\n      var _this = this;\n\n      if (this.terminated) {\n        return Promise.reject('The client has already been terminated');\n      }\n\n      var client = this.acquire(requestTag);\n      return op(client).catch(\n      /*#__PURE__*/\n      function () {\n        var _ref7 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(err) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return _this.release(requestTag, client);\n\n                case 2:\n                  return _context2.abrupt(\"return\", Promise.reject(err));\n\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x3) {\n          return _ref7.apply(this, arguments);\n        };\n      }()).then(\n      /*#__PURE__*/\n      function () {\n        var _ref8 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3(res) {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return _this.release(requestTag, client);\n\n                case 2:\n                  return _context3.abrupt(\"return\", res);\n\n                case 3:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x4) {\n          return _ref8.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"terminate\",\n    value: function () {\n      var _terminate = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _ref11, _ref10, client, _requestCount;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.terminated = true;\n                _iteratorNormalCompletion3 = true;\n                _didIteratorError3 = false;\n                _iteratorError3 = undefined;\n                _context4.prev = 4;\n                _iterator3 = this.activeClients[Symbol.iterator]();\n\n              case 6:\n                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _ref11 = _step3.value;\n                _ref10 = _slicedToArray(_ref11, 2);\n                client = _ref10[0];\n                _requestCount = _ref10[1];\n                this.activeClients.delete(client);\n                _context4.next = 14;\n                return this.clientDestructor(client);\n\n              case 14:\n                _iteratorNormalCompletion3 = true;\n                _context4.next = 6;\n                break;\n\n              case 17:\n                _context4.next = 23;\n                break;\n\n              case 19:\n                _context4.prev = 19;\n                _context4.t0 = _context4[\"catch\"](4);\n                _didIteratorError3 = true;\n                _iteratorError3 = _context4.t0;\n\n              case 23:\n                _context4.prev = 23;\n                _context4.prev = 24;\n\n                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                  _iterator3.return();\n                }\n\n              case 26:\n                _context4.prev = 26;\n\n                if (!_didIteratorError3) {\n                  _context4.next = 29;\n                  break;\n                }\n\n                throw _iteratorError3;\n\n              case 29:\n                return _context4.finish(26);\n\n              case 30:\n                return _context4.finish(23);\n\n              case 31:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[4, 19, 23, 31], [24,, 26, 30]]);\n      }));\n\n      function terminate() {\n        return _terminate.apply(this, arguments);\n      }\n\n      return terminate;\n    }()\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.activeClients.size;\n    }\n    /**\n     * The number of currently active operations.\n     *\n     * @return Number of currently active operations.\n     * @private\n     */\n    // Visible for testing.\n\n  }, {\n    key: \"opCount\",\n    get: function get() {\n      var activeOperationCount = 0;\n      this.activeClients.forEach(function (count) {\n        return activeOperationCount += count;\n      });\n      return activeOperationCount;\n    }\n  }]);\n\n  return ClientPool;\n}();\n\nexports.ClientPool = ClientPool;","map":null,"metadata":{},"sourceType":"script"}
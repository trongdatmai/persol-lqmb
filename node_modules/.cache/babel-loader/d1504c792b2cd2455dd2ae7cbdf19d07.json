{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Provides function wrappers that implement page streaming and retrying.\n */\n\nvar apiCaller_1 = require(\"./apiCaller\");\n\nvar retries_1 = require(\"./normalCalls/retries\");\n\nvar timeout_1 = require(\"./normalCalls/timeout\");\n/**\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\n\n\nfunction createApiCall(func, settings, descriptor) {\n  // we want to be able to accept both promise resolving to a function and a\n  // function. Currently client librares are only calling this method with a\n  // promise, but it will change.\n  var funcPromise = typeof func === 'function' ? Promise.resolve(func) : func; // the following apiCaller will be used for all calls of this function...\n\n  var apiCaller = apiCaller_1.createAPICaller(settings, descriptor);\n  return function (request, callOptions, callback) {\n    var thisSettings = settings.merge(callOptions);\n    var currentApiCaller = apiCaller; // special case: if bundling is disabled for this one call,\n    // use default API caller instead\n\n    if (settings.isBundling && !thisSettings.isBundling) {\n      currentApiCaller = apiCaller_1.createAPICaller(settings, undefined);\n    }\n\n    var status = currentApiCaller.init(thisSettings, callback);\n    funcPromise.then(function (func) {\n      func = currentApiCaller.wrap(func);\n      var retry = thisSettings.retry;\n\n      if (retry && retry.retryCodes && retry.retryCodes.length > 0) {\n        return retries_1.retryable(func, thisSettings.retry, thisSettings.otherArgs);\n      }\n\n      return timeout_1.addTimeoutArg(func, thisSettings.timeout, thisSettings.otherArgs);\n    }).then(function (apiCall) {\n      currentApiCaller.call(apiCall, request, thisSettings, status);\n    }).catch(function (err) {\n      currentApiCaller.fail(status, err);\n    });\n    return currentApiCaller.result(status);\n  };\n}\n\nexports.createApiCall = createApiCall;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _classCallCheck = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar metadata_1 = require(\"./metadata\");\n\nvar constants_1 = require(\"./constants\");\n\nvar PickResultType;\n\n(function (PickResultType) {\n  PickResultType[PickResultType[\"COMPLETE\"] = 0] = \"COMPLETE\";\n  PickResultType[PickResultType[\"QUEUE\"] = 1] = \"QUEUE\";\n  PickResultType[PickResultType[\"TRANSIENT_FAILURE\"] = 2] = \"TRANSIENT_FAILURE\";\n})(PickResultType = exports.PickResultType || (exports.PickResultType = {}));\n/**\n * A standard picker representing a load balancer in the TRANSIENT_FAILURE\n * state. Always responds to every pick request with an UNAVAILABLE status.\n */\n\n\nvar UnavailablePicker =\n/*#__PURE__*/\nfunction () {\n  function UnavailablePicker(status) {\n    _classCallCheck(this, UnavailablePicker);\n\n    if (status !== undefined) {\n      this.status = status;\n    } else {\n      this.status = {\n        code: constants_1.Status.UNAVAILABLE,\n        details: 'No connection established',\n        metadata: new metadata_1.Metadata()\n      };\n    }\n  }\n\n  _createClass(UnavailablePicker, [{\n    key: \"pick\",\n    value: function pick(pickArgs) {\n      return {\n        pickResultType: PickResultType.TRANSIENT_FAILURE,\n        subchannel: null,\n        status: this.status\n      };\n    }\n  }]);\n\n  return UnavailablePicker;\n}();\n\nexports.UnavailablePicker = UnavailablePicker;\n/**\n * A standard picker representing a load balancer in the IDLE or CONNECTING\n * state. Always responds to every pick request with a QUEUE pick result\n * indicating that the pick should be tried again with the next `Picker`. Also\n * reports back to the load balancer that a connection should be established\n * once any pick is attempted.\n */\n\nvar QueuePicker =\n/*#__PURE__*/\nfunction () {\n  // Constructed with a load balancer. Calls exitIdle on it the first time pick is called\n  function QueuePicker(loadBalancer) {\n    _classCallCheck(this, QueuePicker);\n\n    this.loadBalancer = loadBalancer;\n    this.calledExitIdle = false;\n  }\n\n  _createClass(QueuePicker, [{\n    key: \"pick\",\n    value: function pick(pickArgs) {\n      var _this = this;\n\n      if (!this.calledExitIdle) {\n        process.nextTick(function () {\n          _this.loadBalancer.exitIdle();\n        });\n        this.calledExitIdle = true;\n      }\n\n      return {\n        pickResultType: PickResultType.QUEUE,\n        subchannel: null,\n        status: null\n      };\n    }\n  }]);\n\n  return QueuePicker;\n}();\n\nexports.QueuePicker = QueuePicker;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _slicedToArray = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar stream_1 = require(\"stream\");\n\nvar through2 = require(\"through2\");\n\nvar url_1 = require(\"url\");\n\nvar backoff_1 = require(\"./backoff\");\n\nvar convert_1 = require(\"./convert\");\n\nvar document_1 = require(\"./document\");\n\nvar logger_1 = require(\"./logger\");\n\nvar path_1 = require(\"./path\");\n\nvar pool_1 = require(\"./pool\");\n\nvar reference_1 = require(\"./reference\");\n\nvar reference_2 = require(\"./reference\");\n\nvar serializer_1 = require(\"./serializer\");\n\nvar timestamp_1 = require(\"./timestamp\");\n\nvar transaction_1 = require(\"./transaction\");\n\nvar util_1 = require(\"./util\");\n\nvar validate_1 = require(\"./validate\");\n\nvar write_batch_1 = require(\"./write-batch\");\n\nvar firestore_client_config_json_1 = require(\"./v1/firestore_client_config.json\");\n\nvar serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\n\nvar reference_3 = require(\"./reference\");\n\nexports.CollectionReference = reference_3.CollectionReference;\nexports.DocumentReference = reference_3.DocumentReference;\nexports.QuerySnapshot = reference_3.QuerySnapshot;\nexports.Query = reference_3.Query;\n\nvar document_2 = require(\"./document\");\n\nexports.DocumentSnapshot = document_2.DocumentSnapshot;\nexports.QueryDocumentSnapshot = document_2.QueryDocumentSnapshot;\n\nvar field_value_1 = require(\"./field-value\");\n\nexports.FieldValue = field_value_1.FieldValue;\n\nvar write_batch_2 = require(\"./write-batch\");\n\nexports.WriteBatch = write_batch_2.WriteBatch;\nexports.WriteResult = write_batch_2.WriteResult;\n\nvar transaction_2 = require(\"./transaction\");\n\nexports.Transaction = transaction_2.Transaction;\n\nvar timestamp_2 = require(\"./timestamp\");\n\nexports.Timestamp = timestamp_2.Timestamp;\n\nvar document_change_1 = require(\"./document-change\");\n\nexports.DocumentChange = document_change_1.DocumentChange;\n\nvar path_2 = require(\"./path\");\n\nexports.FieldPath = path_2.FieldPath;\n\nvar geo_point_1 = require(\"./geo-point\");\n\nexports.GeoPoint = geo_point_1.GeoPoint;\n\nvar logger_2 = require(\"./logger\");\n\nexports.setLogFunction = logger_2.setLogFunction;\n\nvar libVersion = require('../../package.json').version;\n\nlogger_1.setLibVersion(libVersion);\n/*!\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\n */\n\n/**\n * @namespace google.protobuf\n */\n\n/**\n * @namespace google.rpc\n */\n\n/**\n * @namespace google.longrunning\n */\n\n/**\n * @namespace google.firestore.v1\n */\n\n/**\n * @namespace google.firestore.v1beta1\n */\n\n/**\n * @namespace google.firestore.admin.v1\n */\n\n/*!\n * @see v1\n */\n\nvar v1; // Lazy-loaded in `_runRequest()`\n\n/*!\n * @see v1beta1\n */\n\nvar v1beta1; // Lazy-loaded upon access.\n\n/*!\n * HTTP header for the resource prefix to improve routing and project isolation\n * by the backend.\n */\n\nvar CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\n/*!\n * The maximum number of times to retry idempotent requests.\n */\n\nvar MAX_REQUEST_RETRIES = 5;\n/*!\n * The default number of idle GRPC channel to keep.\n */\n\nvar DEFAULT_MAX_IDLE_CHANNELS = 1;\n/*!\n * The maximum number of concurrent requests supported by a single GRPC channel,\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\n * operations, we need to use more than one GAPIC client since these clients\n * multiplex all requests over a single channel.\n */\n\nvar MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\n/**\n * Document data (e.g. for use with\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\n * to values.\n *\n * @typedef {Object.<string, *>} DocumentData\n */\n\n/**\n * Update data (for use with [update]{@link DocumentReference#update})\n * that contains paths (e.g. 'foo' or 'foo.baz') mapped to values. Fields that\n * contain dots reference nested fields within the document.\n *\n * @typedef {Object.<string, *>} UpdateData\n */\n\n/**\n * An options object that configures conditional behavior of\n * [update()]{@link DocumentReference#update} and\n * [delete()]{@link DocumentReference#delete} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\n * can be restricted to only apply to documents that match the specified\n * conditions.\n *\n * @example\n * const documentRef = firestore.doc('coll/doc');\n *\n * documentRef.get().then(snapshot => {\n *   const updateTime = snapshot.updateTime;\n *\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\n *   return documentRef.delete({ lastUpdateTime: updateTime });\n * });\n *\n * @property {string} lastUpdateTime The update time to enforce (specified as\n * an ISO 8601 string).\n * @typedef {Object} Precondition\n */\n\n/**\n * An options object that configures the behavior of\n * [set()]{@link DocumentReference#set} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. These calls can be\n * configured to perform granular merges instead of overwriting the target\n * documents in their entirety by providing a SetOptions object with\n * { merge : true }.\n *\n * @property {boolean} merge Changes the behavior of a set() call to only\n * replace the values specified in its data argument. Fields omitted from the\n * set() call remain untouched.\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\n * set() calls to only replace the specified field paths. Any field path that is\n * not specified is ignored and remains untouched.\n * It is an error to pass a SetOptions object to a set() call that is missing a\n * value for any of the fields specified here.\n * @typedef {Object} SetOptions\n */\n\n/**\n * An options object that can be used to configure the behavior of\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\n * calls can be configured to only return a subset of fields.\n *\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\n * to return and reduces the amount of data transmitted by the backend.\n * Adding a field mask does not filter results. Documents do not need to\n * contain values for all the fields in the mask to be part of the result set.\n * @typedef {Object} ReadOptions\n */\n\n/**\n * The Firestore client represents a Firestore Database and is the entry point\n * for all Firestore operations.\n *\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\n *\n * @class\n *\n * @example <caption>Install the client library with <a\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\n * @google-cloud/firestore\n *\n * @example <caption>Import the client library</caption>\n * var Firestore = require('@google-cloud/firestore');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n\nvar Firestore =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {Object=} settings [Configuration object](#/docs).\n   * @param {string=} settings.projectId The project ID from the Google\n   * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\n   * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\n   * environments that support\n   * {@link https://cloud.google.com/docs/authentication Application Default\n   * Credentials}\n   * @param {string=} settings.keyFilename Local file containing the Service\n   * Account credentials as downloaded from the Google Developers Console. Can\n   * be omitted in environments that support\n   * {@link https://cloud.google.com/docs/authentication Application Default\n   * Credentials}. To configure Firestore with custom credentials, use\n   * `settings.credentials` and provide the `client_email` and `private_key` of\n   * your service account.\n   * @param {{client_email:string=, private_key:string=}=} settings.credentials\n   * The `client_email` and `private_key` properties of the service account\n   * to use with your Firestore project. Can be omitted in environments that\n   * support {@link https://cloud.google.com/docs/authentication Application\n   * Default Credentials}. If your credentials are stored in a JSON file, you\n   * can specify a `keyFilename` instead.\n   * @param {string=} settings.host The host to connect to.\n   * @param {boolean=} settings.ssl Whether to use SSL when connecting.\n   * @param {number=} settings.maxIdleChannels  The maximum number of idle GRPC\n   * channels to keep. A smaller number of idle channels reduces memory usage\n   * but increases request latency for clients with fluctuating request rates.\n   * If set to 0, shuts down all GRPC channels when the client becomes idle.\n   * Defaults to 1.\n   */\n  function Firestore(settings) {\n    var _this = this;\n\n    _classCallCheck(this, Firestore);\n\n    /**\n     * The configuration options for the GAPIC client.\n     * @private\n     */\n    this._settings = {};\n    /**\n     * Whether the initialization settings can still be changed by invoking\n     * `settings()`.\n     * @private\n     */\n\n    this._settingsFrozen = false;\n    /**\n     * The serializer to use for the Protobuf transformation.\n     * @private\n     */\n\n    this._serializer = null;\n    /**\n     * The project ID for this client.\n     *\n     * The project ID is auto-detected during the first request unless a project\n     * ID is passed to the constructor (or provided via `.settings()`).\n     * @private\n     */\n\n    this._projectId = undefined;\n    /** @private */\n\n    this._lastSuccessfulRequest = 0;\n    var libraryHeader = {\n      libName: 'gccl',\n      libVersion: libVersion\n    };\n\n    if (settings && settings.firebaseVersion) {\n      libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\n    }\n\n    if (process.env.FIRESTORE_EMULATOR_HOST) {\n      validate_1.validateHost('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\n      var emulatorSettings = Object.assign(Object.assign(Object.assign({}, settings), libraryHeader), {\n        host: process.env.FIRESTORE_EMULATOR_HOST,\n        ssl: false\n      }); // If FIRESTORE_EMULATOR_HOST is set, we unset `servicePath` and `apiEndpoint` to\n      // ensure that only one endpoint setting is provided.\n\n      delete emulatorSettings.servicePath;\n      delete emulatorSettings.apiEndpoint; // Manually merge the Authorization header to preserve user-provided headers\n\n      emulatorSettings.customHeaders = Object.assign({}, emulatorSettings.customHeaders, {\n        Authorization: 'Bearer owner'\n      });\n      this.validateAndApplySettings(emulatorSettings);\n    } else {\n      this.validateAndApplySettings(Object.assign(Object.assign({}, settings), libraryHeader));\n    }\n\n    var retryConfig = serviceConfig.retry_params.default;\n    this._backoffSettings = {\n      initialDelayMs: retryConfig.initial_retry_delay_millis,\n      maxDelayMs: retryConfig.max_retry_delay_millis,\n      backoffFactor: retryConfig.retry_delay_multiplier\n    }; // GCF currently tears down idle connections after two minutes. Requests\n    // that are issued after this period may fail. On GCF, we therefore issue\n    // these requests as part of a transaction so that we can safely retry until\n    // the network link is reestablished.\n    //\n    // The environment variable FUNCTION_TRIGGER_TYPE is used to detect the GCF\n    // environment.\n\n    this._preferTransactions = process.env.FUNCTION_TRIGGER_TYPE !== undefined;\n    this._lastSuccessfulRequest = 0;\n\n    if (this._preferTransactions) {\n      logger_1.logger('Firestore', null, 'Detected GCF environment');\n    }\n\n    var maxIdleChannels = this._settings.maxIdleChannels === undefined ? DEFAULT_MAX_IDLE_CHANNELS : this._settings.maxIdleChannels;\n    this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels,\n    /* clientFactory= */\n    function () {\n      var client;\n\n      if (_this._settings.ssl === false) {\n        var grpc = require('@grpc/grpc-js');\n\n        var sslCreds = grpc.credentials.createInsecure();\n        client = new module.exports.v1(Object.assign({\n          sslCreds: sslCreds\n        }, _this._settings));\n      } else {\n        client = new module.exports.v1(_this._settings);\n      }\n\n      logger_1.logger('Firestore', null, 'Initialized Firestore GAPIC Client');\n      return client;\n    },\n    /* clientDestructor= */\n    function (client) {\n      return client.close();\n    });\n    logger_1.logger('Firestore', null, 'Initialized Firestore');\n  }\n  /**\n   * Specifies custom settings to be used to configure the `Firestore`\n   * instance. Can only be invoked once and before any other Firestore method.\n   *\n   * If settings are provided via both `settings()` and the `Firestore`\n   * constructor, both settings objects are merged and any settings provided via\n   * `settings()` take precedence.\n   *\n   * @param {object} settings The settings to use for all Firestore operations.\n   */\n\n\n  _createClass(Firestore, [{\n    key: \"settings\",\n    value: function settings(_settings) {\n      validate_1.validateObject('settings', _settings);\n      validate_1.validateString('settings.projectId', _settings.projectId, {\n        optional: true\n      });\n\n      if (this._settingsFrozen) {\n        throw new Error('Firestore has already been initialized. You can only call ' + 'settings() once, and only before calling any other methods on a ' + 'Firestore object.');\n      }\n\n      var mergedSettings = Object.assign(Object.assign({}, this._settings), _settings);\n      this.validateAndApplySettings(mergedSettings);\n      this._settingsFrozen = true;\n    }\n  }, {\n    key: \"validateAndApplySettings\",\n    value: function validateAndApplySettings(settings) {\n      if (settings.projectId !== undefined) {\n        validate_1.validateString('settings.projectId', settings.projectId);\n        this._projectId = settings.projectId;\n      }\n\n      if (settings.host !== undefined) {\n        validate_1.validateHost('settings.host', settings.host);\n\n        if (settings.servicePath !== undefined) {\n          throw new Error('Cannot set both \"settings.host\" and \"settings.servicePath\".');\n        }\n\n        if (settings.apiEndpoint !== undefined) {\n          throw new Error('Cannot set both \"settings.host\" and \"settings.apiEndpoint\".');\n        }\n\n        var url = new url_1.URL(\"http://\".concat(settings.host));\n        settings.servicePath = url.hostname;\n\n        if (url.port !== '' && settings.port === undefined) {\n          settings.port = Number(url.port);\n        } // We need to remove the `host` setting, in case a user calls `settings()`,\n        // which will again enforce that `host` and `servicePath` are not both\n        // specified.\n\n\n        delete settings.host;\n      }\n\n      if (settings.ssl !== undefined) {\n        validate_1.validateBoolean('settings.ssl', settings.ssl);\n      }\n\n      if (settings.maxIdleChannels !== undefined) {\n        validate_1.validateInteger('settings.maxIdleChannels', settings.maxIdleChannels, {\n          minValue: 0\n        });\n      }\n\n      this._settings = settings;\n      this._serializer = new serializer_1.Serializer(this);\n    }\n    /**\n     * Returns the Project ID for this Firestore instance. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"doc\",\n\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path.\n     *\n     * @param {string} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The\n     * [DocumentReference]{@link DocumentReference} instance.\n     *\n     * @example\n     * let documentRef = firestore.doc('collection/document');\n     * console.log(`Path of document is ${documentRef.path}`);\n     */\n    value: function doc(documentPath) {\n      path_1.validateResourcePath('documentPath', documentPath);\n      var path = path_1.ResourcePath.EMPTY.append(documentPath);\n\n      if (!path.isDocument) {\n        throw new Error(\"Value for argument \\\"documentPath\\\" must point to a document, but was \\\"\".concat(documentPath, \"\\\". Your path does not contain an even number of components.\"));\n      }\n\n      return new reference_2.DocumentReference(this, path);\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} The\n     * [CollectionReference]{@link CollectionReference} instance.\n     *\n     * @example\n     * let collectionRef = firestore.collection('collection');\n     *\n     * // Add a document with an auto-generated ID.\n     * collectionRef.add({foo: 'bar'}).then((documentRef) => {\n     *   console.log(`Added document at ${documentRef.path})`);\n     * });\n     */\n\n  }, {\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      path_1.validateResourcePath('collectionPath', collectionPath);\n      var path = path_1.ResourcePath.EMPTY.append(collectionPath);\n\n      if (!path.isCollection) {\n        throw new Error(\"Value for argument \\\"collectionPath\\\" must point to a collection, but was \\\"\".concat(collectionPath, \"\\\". Your path does not contain an odd number of components.\"));\n      }\n\n      return new reference_1.CollectionReference(this, path);\n    }\n    /**\n     * Creates and returns a new Query that includes all documents in the\n     * database that are contained in a collection or subcollection with the\n     * given collectionId.\n     *\n     * @param {string} collectionId Identifies the collections to query over.\n     * Every collection or subcollection with this ID as the last segment of its\n     * path will be included. Cannot contain a slash.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\n     * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\n     *\n     * Promise.all([docA, docB]).then(() => {\n     *    let query = firestore.collectionGroup('mygroup');\n     *    query = query.where('foo', '==', 'bar');\n     *    return query.get().then(snapshot => {\n     *       console.log(`Found ${snapshot.size} documents.`);\n     *    });\n     * });\n     */\n\n  }, {\n    key: \"collectionGroup\",\n    value: function collectionGroup(collectionId) {\n      if (collectionId.indexOf('/') !== -1) {\n        throw new Error(\"Invalid collectionId '\".concat(collectionId, \"'. Collection IDs must not contain '/'.\"));\n      }\n\n      return new reference_1.Query(this, reference_1.QueryOptions.forCollectionGroupQuery(collectionId));\n    }\n    /**\n     * Creates a [WriteBatch]{@link WriteBatch}, used for performing\n     * multiple writes as a single atomic operation.\n     *\n     * @returns {WriteBatch} A WriteBatch that operates on this Firestore\n     * client.\n     *\n     * @example\n     * let writeBatch = firestore.batch();\n     *\n     * // Add two documents in an atomic batch.\n     * let data = { foo: 'bar' };\n     * writeBatch.set(firestore.doc('col/doc1'), data);\n     * writeBatch.set(firestore.doc('col/doc2'), data);\n     *\n     * writeBatch.commit().then(res => {\n     *   console.log(`Added document at ${res.writeResults[0].updateTime}`);\n     * });\n     */\n\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      return new write_batch_1.WriteBatch(this);\n    }\n  }, {\n    key: \"snapshot_\",\n    value: function snapshot_(documentOrName, readTime, encoding) {\n      // TODO: Assert that Firestore Project ID is valid.\n      var convertTimestamp;\n      var convertFields;\n\n      if (encoding === undefined || encoding === 'protobufJS') {\n        convertTimestamp = function convertTimestamp(data) {\n          return data;\n        };\n\n        convertFields = function convertFields(data) {\n          return data;\n        };\n      } else if (encoding === 'json') {\n        // Google Cloud Functions calls us with Proto3 JSON format data, which we\n        // must convert to Protobuf JS.\n        convertTimestamp = convert_1.timestampFromJson;\n        convertFields = convert_1.fieldsFromJson;\n      } else {\n        throw new Error(\"Unsupported encoding format. Expected \\\"json\\\" or \\\"protobufJS\\\", \" + \"but was \\\"\".concat(encoding, \"\\\".\"));\n      }\n\n      var document = new document_1.DocumentSnapshotBuilder();\n\n      if (typeof documentOrName === 'string') {\n        document.ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\n      } else {\n        document.ref = new reference_2.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\n        document.fieldsProto = documentOrName.fields ? convertFields(documentOrName.fields) : {};\n        document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\n        document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\n      }\n\n      if (readTime) {\n        document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\n      }\n\n      return document.build();\n    }\n    /**\n     * Executes the given updateFunction and commits the changes applied within\n     * the transaction.\n     *\n     * You can use the transaction object passed to 'updateFunction' to read and\n     * modify Firestore documents under lock. Transactions are committed once\n     * 'updateFunction' resolves and attempted up to five times on failure.\n     *\n     * @param {function(Transaction)} updateFunction The function to execute\n     * within the transaction context.\n     * @param {object=} transactionOptions Transaction options.\n     * @param {number=} transactionOptions.maxAttempts - The maximum number of\n     * attempts for this transaction.\n     * @returns {Promise} If the transaction completed successfully or was\n     * explicitly aborted (by the updateFunction returning a failed Promise), the\n     * Promise returned by the updateFunction will be returned here. Else if the\n     * transaction failed, a rejected Promise with the corresponding failure\n     * error will be returned.\n     *\n     * @example\n     * let counterTransaction = firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       let count =  doc.get('count') || 0;\n     *       if (count > 10) {\n     *         return Promise.reject('Reached maximum count');\n     *       }\n     *       transaction.update(documentRef, { count: ++count });\n     *       return Promise.resolve(count);\n     *     }\n     *\n     *     transaction.create(documentRef, { count: 1 });\n     *     return Promise.resolve(1);\n     *   });\n     * });\n     *\n     * counterTransaction.then(res => {\n     *   console.log(`Count updated to ${res}`);\n     * });\n     */\n\n  }, {\n    key: \"runTransaction\",\n    value: function runTransaction(updateFunction, transactionOptions) {\n      var _this2 = this;\n\n      validate_1.validateFunction('updateFunction', updateFunction);\n      var defaultAttempts = 5;\n      var tag = util_1.requestTag();\n      var attemptsRemaining;\n\n      if (transactionOptions) {\n        validate_1.validateObject('transactionOptions', transactionOptions);\n        validate_1.validateInteger('transactionOptions.maxAttempts', transactionOptions.maxAttempts, {\n          optional: true,\n          minValue: 1\n        });\n        attemptsRemaining = transactionOptions.maxAttempts || defaultAttempts;\n      } else {\n        attemptsRemaining = defaultAttempts;\n      }\n\n      return this.initializeIfNeeded(tag).then(function () {\n        return _this2._runTransaction(updateFunction, {\n          requestTag: tag,\n          attemptsRemaining: attemptsRemaining\n        });\n      });\n    }\n  }, {\n    key: \"_runTransaction\",\n    value: function _runTransaction(updateFunction, transactionOptions) {\n      var _this3 = this;\n\n      var requestTag = transactionOptions.requestTag;\n      var attemptsRemaining = transactionOptions.attemptsRemaining;\n      var previousTransaction = transactionOptions.previousTransaction;\n      var transaction = new transaction_1.Transaction(this, requestTag, previousTransaction);\n      var result;\n      return transaction.begin().then(function () {\n        var promise = updateFunction(transaction);\n        result = promise instanceof Promise ? promise : Promise.reject(new Error('You must return a Promise in your transaction()-callback.'));\n        return result.catch(function (err) {\n          logger_1.logger('Firestore.runTransaction', requestTag, 'Rolling back transaction after callback error:', err); // Rollback the transaction and return the failed result.\n\n          return transaction.rollback().then(function () {\n            return result;\n          });\n        });\n      }).then(function () {\n        return transaction.commit().then(function () {\n          return result;\n        }).catch(function (err) {\n          if (attemptsRemaining > 1) {\n            logger_1.logger('Firestore.runTransaction', requestTag, \"Retrying transaction after error: \".concat(JSON.stringify(err), \".\"));\n            return _this3._runTransaction(updateFunction, {\n              previousTransaction: transaction,\n              requestTag: requestTag,\n              attemptsRemaining: attemptsRemaining - 1\n            });\n          }\n\n          logger_1.logger('Firestore.runTransaction', requestTag, 'Exhausted transaction retries, returning error: %s', err);\n          return Promise.reject(err);\n        });\n      });\n    }\n    /**\n     * Fetches the root collections that are associated with this Firestore\n     * database.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * firestore.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found collection with id: ${collection.id}`);\n     *   }\n     * });\n     */\n\n  }, {\n    key: \"listCollections\",\n    value: function listCollections() {\n      var rootDocument = new reference_2.DocumentReference(this, path_1.ResourcePath.EMPTY);\n      return rootDocument.listCollections();\n    }\n    /**\n     * Retrieves multiple documents from Firestore.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * let docRef1 = firestore.doc('col/doc1');\n     * let docRef2 = firestore.doc('col/doc2');\n     *\n     * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\n     *   console.log(`First document: ${JSON.stringify(docs[0])}`);\n     *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\n     * });\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var _this4 = this;\n\n      for (var _len = arguments.length, documentRefsOrReadOptions = new Array(_len), _key = 0; _key < _len; _key++) {\n        documentRefsOrReadOptions[_key] = arguments[_key];\n      }\n\n      validate_1.validateMinNumberOfArguments('Firestore.getAll', arguments, 1);\n\n      var _transaction_1$parseG = transaction_1.parseGetAllArguments(documentRefsOrReadOptions),\n          documents = _transaction_1$parseG.documents,\n          fieldMask = _transaction_1$parseG.fieldMask;\n\n      var tag = util_1.requestTag();\n      return this.initializeIfNeeded(tag).then(function () {\n        return _this4.getAll_(documents, fieldMask, tag);\n      });\n    }\n    /**\n     * Internal method to retrieve multiple documents from Firestore, optionally\n     * as part of a transaction.\n     *\n     * @private\n     * @param docRefs The documents to receive.\n     * @param fieldMask An optional field mask to apply to this read.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param transactionId The transaction ID to use for this read.\n     * @returns A Promise that contains an array with the resulting documents.\n     */\n\n  }, {\n    key: \"getAll_\",\n    value: function getAll_(docRefs, fieldMask, requestTag, transactionId) {\n      var requestedDocuments = new Set();\n      var retrievedDocuments = new Map();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = docRefs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var docRef = _step.value;\n          requestedDocuments.add(docRef.formattedName);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var request = {\n        database: this.formattedName,\n        transaction: transactionId,\n        documents: Array.from(requestedDocuments)\n      };\n\n      if (fieldMask) {\n        var fieldPaths = fieldMask.map(function (fieldPath) {\n          return fieldPath.formattedName;\n        });\n        request.mask = {\n          fieldPaths: fieldPaths\n        };\n      }\n\n      var self = this;\n      return self.requestStream('batchGetDocuments', request, requestTag).then(function (stream) {\n        return new Promise(function (resolve, reject) {\n          stream.on('error', function (err) {\n            logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with error:', err);\n            reject(err);\n          }).on('data', function (response) {\n            try {\n              var document;\n\n              if (response.found) {\n                logger_1.logger('Firestore.getAll_', requestTag, 'Received document: %s', response.found.name);\n                document = self.snapshot_(response.found, response.readTime);\n              } else {\n                logger_1.logger('Firestore.getAll_', requestTag, 'Document missing: %s', response.missing);\n                document = self.snapshot_(response.missing, response.readTime);\n              }\n\n              var path = document.ref.path;\n              retrievedDocuments.set(path, document);\n            } catch (err) {\n              logger_1.logger('Firestore.getAll_', requestTag, 'GetAll failed with exception:', err);\n              reject(err);\n            }\n          }).on('end', function () {\n            logger_1.logger('Firestore.getAll_', requestTag, 'Received %d results', retrievedDocuments.size); // BatchGetDocuments doesn't preserve document order. We use\n            // the request order to sort the resulting documents.\n\n            var orderedDocuments = [];\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = docRefs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var docRef = _step2.value;\n                var document = retrievedDocuments.get(docRef.path);\n\n                if (document !== undefined) {\n                  orderedDocuments.push(document);\n                } else {\n                  reject(new Error(\"Did not receive document for \\\"\".concat(docRef.path, \"\\\".\")));\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            resolve(orderedDocuments);\n          });\n          stream.resume();\n        });\n      });\n    }\n    /**\n     * Terminates the Firestore client and closes all open streams.\n     *\n     * @return A Promise that resolves when the client is terminated.\n     */\n\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      return this._clientPool.terminate();\n    }\n    /**\n     * Initializes the client if it is not already initialized. All methods in the\n     * SDK can be used after this method completes.\n     *\n     * @private\n     * @param requestTag A unique client-assigned identifier that caused this\n     * initialization.\n     * @return A Promise that resolves when the client is initialized.\n     */\n\n  }, {\n    key: \"initializeIfNeeded\",\n    value: function () {\n      var _initializeIfNeeded = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(requestTag) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._settingsFrozen = true;\n\n                if (!(this._projectId === undefined)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.prev = 2;\n                _context.next = 5;\n                return this._clientPool.run(requestTag, function (gapicClient) {\n                  return gapicClient.getProjectId();\n                });\n\n              case 5:\n                this._projectId = _context.sent;\n                logger_1.logger('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\n                _context.next = 13;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                logger_1.logger('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', _context.t0);\n                return _context.abrupt(\"return\", Promise.reject(_context.t0));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      function initializeIfNeeded(_x) {\n        return _initializeIfNeeded.apply(this, arguments);\n      }\n\n      return initializeIfNeeded;\n    }()\n    /**\n     * Returns GAX call options that set the cloud resource header.\n     * @private\n     */\n\n  }, {\n    key: \"createCallOptions\",\n    value: function createCallOptions() {\n      return {\n        otherArgs: {\n          headers: Object.assign(_defineProperty({}, CLOUD_RESOURCE_HEADER, this.formattedName), this._settings.customHeaders)\n        }\n      };\n    }\n    /**\n     * A function returning a Promise that can be retried.\n     *\n     * @private\n     * @callback retryFunction\n     * @returns {Promise} A Promise indicating the function's success.\n     */\n\n    /**\n     * Helper method that retries failed Promises.\n     *\n     * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\n     * schedules the first attempt immediately, and then waits 100 milliseconds\n     * for further attempts.\n     *\n     * @private\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param func Method returning a Promise than can be retried.\n     * @returns  - A Promise with the function's result if successful within\n     * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\n     */\n\n  }, {\n    key: \"_retry\",\n    value: function () {\n      var _retry2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(methodName, requestTag, func) {\n        var backoff, lastError, attempt, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                backoff = new backoff_1.ExponentialBackoff();\n                lastError = undefined;\n                attempt = 0;\n\n              case 3:\n                if (!(attempt < MAX_REQUEST_RETRIES)) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                if (lastError) {\n                  logger_1.logger('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\n                }\n\n                _context2.prev = 5;\n                _context2.next = 8;\n                return backoff.backoffAndWait();\n\n              case 8:\n                _context2.next = 10;\n                return func();\n\n              case 10:\n                result = _context2.sent;\n                this._lastSuccessfulRequest = new Date().getTime();\n                return _context2.abrupt(\"return\", result);\n\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](5);\n                lastError = _context2.t0;\n\n                if (!util_1.isPermanentRpcError(_context2.t0, methodName, serviceConfig)) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                return _context2.abrupt(\"break\", 23);\n\n              case 20:\n                ++attempt;\n                _context2.next = 3;\n                break;\n\n              case 23:\n                logger_1.logger('Firestore._retry', requestTag, 'Request failed with error:', lastError);\n                return _context2.abrupt(\"return\", Promise.reject(lastError));\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 15]]);\n      }));\n\n      function _retry(_x2, _x3, _x4) {\n        return _retry2.apply(this, arguments);\n      }\n\n      return _retry;\n    }()\n    /**\n     * Waits for the provided stream to become active and returns a paused but\n     * healthy stream. If an error occurs before the first byte is read, the\n     * method rejects the returned Promise.\n     *\n     * @private\n     * @param backendStream The Node stream to monitor.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param request If specified, the request that should be written to the\n     * stream after opening.\n     * @returns A guaranteed healthy stream that should be used instead of\n     * `backendStream`.\n     */\n\n  }, {\n    key: \"_initializeStream\",\n    value: function _initializeStream(backendStream, requestTag, request) {\n      var resultStream = new stream_1.PassThrough({\n        objectMode: true\n      });\n      resultStream.pause();\n      /**\n       * Whether we have resolved the Promise and returned the stream to the\n       * caller.\n       */\n\n      var streamInitialized = false;\n      return new Promise(function (resolve, reject) {\n        function streamReady() {\n          if (!streamInitialized) {\n            streamInitialized = true;\n            logger_1.logger('Firestore._initializeStream', requestTag, 'Releasing stream');\n            resolve(resultStream);\n          }\n        }\n\n        function streamEnded() {\n          logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream end');\n          streamReady();\n          resultStream.unpipe(backendStream);\n        }\n\n        backendStream.on('data', function () {\n          return streamReady();\n        });\n        backendStream.on('end', function () {\n          return streamEnded();\n        });\n        backendStream.on('close', function () {\n          return streamEnded();\n        });\n        backendStream.on('error', function (err) {\n          if (!streamInitialized) {\n            // If we receive an error before we were able to receive any data,\n            // reject this stream.\n            logger_1.logger('Firestore._initializeStream', requestTag, 'Received initial error:', err);\n            reject(err);\n          } else {\n            logger_1.logger('Firestore._initializeStream', requestTag, 'Received stream error:', err); // We execute the forwarding of the 'error' event via setImmediate() as\n            // V8 guarantees that the Promise chain returned from this method\n            // is resolved before any code executed via setImmediate(). This\n            // allows the caller to attach an error handler.\n\n            setImmediate(function () {\n              resultStream.emit('error', err);\n            }, 0);\n          }\n        });\n        backendStream.pipe(resultStream);\n\n        if (request) {\n          logger_1.logger('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\n          backendStream.write(request, 'utf-8', function () {\n            logger_1.logger('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\n            streamReady();\n          });\n        }\n      });\n    }\n    /**\n     * A funnel for all non-streaming API requests, assigning a project ID where\n     * necessary within the request options.\n     *\n     * @private\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @returns A Promise with the request result.\n     */\n\n  }, {\n    key: \"request\",\n    value: function request(methodName, _request, requestTag) {\n      var _this5 = this;\n\n      var callOptions = this.createCallOptions();\n      return this._clientPool.run(requestTag,\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3(gapicClient) {\n          var _ref2, _ref3, result;\n\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  logger_1.logger('Firestore.request', requestTag, 'Sending request: %j', _request);\n                  _context3.next = 4;\n                  return gapicClient[methodName](_request, callOptions);\n\n                case 4:\n                  _ref2 = _context3.sent;\n                  _ref3 = _slicedToArray(_ref2, 1);\n                  result = _ref3[0];\n                  logger_1.logger('Firestore.request', requestTag, 'Received response: %j', result);\n                  _this5._lastSuccessfulRequest = new Date().getTime();\n                  return _context3.abrupt(\"return\", result);\n\n                case 12:\n                  _context3.prev = 12;\n                  _context3.t0 = _context3[\"catch\"](0);\n                  logger_1.logger('Firestore.request', requestTag, 'Received error:', _context3.t0);\n                  return _context3.abrupt(\"return\", Promise.reject(_context3.t0));\n\n                case 16:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[0, 12]]);\n        }));\n\n        return function (_x5) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n    /**\n     * A funnel for streaming API requests, assigning a project ID where necessary\n     * within the request options.\n     *\n     * The stream is returned in paused state and needs to be resumed once all\n     * listeners are attached.\n     *\n     * @private\n     * @param methodName Name of the streaming Veneer API endpoint that\n     * takes a request and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @returns A Promise with the resulting read-only stream.\n     */\n\n  }, {\n    key: \"requestStream\",\n    value: function requestStream(methodName, request, requestTag) {\n      var _this6 = this;\n\n      var callOptions = this.createCallOptions();\n      var bidrectional = methodName === 'listen';\n      var result = new util_1.Deferred();\n\n      this._clientPool.run(requestTag, function (gapicClient) {\n        // While we return the stream to the callee early, we don't want to\n        // release the GAPIC client until the callee has finished processing the\n        // stream.\n        var lifetime = new util_1.Deferred();\n\n        _this6._retry(methodName, requestTag,\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee4() {\n          var stream, logStream, resultStream;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  logger_1.logger('Firestore.requestStream', requestTag, 'Sending request: %j', request);\n                  stream = bidrectional ? gapicClient[methodName](callOptions) : gapicClient[methodName](request, callOptions);\n                  logStream = through2.obj(function (chunk, enc, callback) {\n                    logger_1.logger('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\n                    callback();\n                  });\n                  stream.pipe(logStream);\n                  stream.on('close', lifetime.resolve);\n                  stream.on('end', lifetime.resolve);\n                  stream.on('finish', lifetime.resolve);\n                  stream.on('error', lifetime.resolve);\n                  _context4.next = 10;\n                  return _this6._initializeStream(stream, requestTag, bidrectional ? request : undefined);\n\n                case 10:\n                  resultStream = _context4.sent;\n                  resultStream.on('end', function () {\n                    return stream.end();\n                  });\n                  result.resolve(resultStream);\n\n                case 13:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }))).catch(function (err) {\n          lifetime.resolve();\n          result.reject(err);\n        });\n\n        return lifetime.promise;\n      });\n\n      return result.promise;\n    }\n  }, {\n    key: \"projectId\",\n    get: function get() {\n      if (this._projectId === undefined) {\n        throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\n      }\n\n      return this._projectId;\n    }\n    /**\n     * Returns the root path of the database. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"formattedName\",\n    get: function get() {\n      return \"projects/\".concat(this.projectId, \"/databases/\").concat(path_1.DEFAULT_DATABASE_ID);\n    }\n  }]);\n\n  return Firestore;\n}();\n\nexports.Firestore = Firestore;\n/**\n * A logging function that takes a single string.\n *\n * @callback Firestore~logFunction\n * @param {string} Log message\n */\n// tslint:disable-next-line:no-default-export\n\n/**\n * The default export of the `@google-cloud/firestore` package is the\n * {@link Firestore} class.\n *\n * See {@link Firestore} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Firestore} @google-cloud/firestore\n * @alias nodejs-firestore\n *\n * @example <caption>Install the client library with <a\n * href=\"https://www.npmjs.com/\">npm</a>:</caption> npm install --save\n * @google-cloud/firestore\n *\n * @example <caption>Import the client library</caption>\n * var Firestore = require('@google-cloud/firestore');\n *\n * @example <caption>Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:</caption> var firestore = new Firestore();\n *\n * @example <caption>Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:</caption> var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n// tslint:disable-next-line:no-default-export\n\nexports.default = Firestore; // Horrible hack to ensure backwards compatibility with <= 17.0, which allows\n// users to call the default constructor via\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\n\nvar existingExports = module.exports;\nmodule.exports = Firestore;\nmodule.exports = Object.assign(module.exports, existingExports);\n/**\n * {@link v1beta1} factory function.\n *\n * @private\n * @name Firestore.v1beta1\n * @see v1beta1\n * @type {function}\n */\n\nObject.defineProperty(module.exports, 'v1beta1', {\n  // The v1beta1 module is very large. To avoid pulling it in from static\n  // scope, we lazy-load and cache the module.\n  get: function get() {\n    if (!v1beta1) {\n      v1beta1 = require('./v1beta1');\n    }\n\n    return v1beta1;\n  }\n});\n/**\n * {@link v1} factory function.\n *\n * @private\n * @name Firestore.v1\n * @see v1\n * @type {function}\n */\n\nObject.defineProperty(module.exports, 'v1', {\n  // The v1 module is very large. To avoid pulling it in from static\n  // scope, we lazy-load and cache the module.\n  get: function get() {\n    if (!v1) {\n      v1 = require('./v1');\n    }\n\n    return v1;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}
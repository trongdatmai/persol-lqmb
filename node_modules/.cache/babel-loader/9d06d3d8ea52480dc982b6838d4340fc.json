{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar _classCallCheck = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path = require(\"path\");\n\nvar createApiCall_1 = require(\"./createApiCall\");\n\nvar descriptor_1 = require(\"./descriptor\");\n\nvar configData = require('./operations_client_config');\n\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\n\nvar version = require('../../package.json').version;\n\nvar DEFAULT_SERVICE_PORT = 443;\nvar CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\nvar PAGE_DESCRIPTORS = {\n  listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations')\n};\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\n\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\n\nvar OperationsClient =\n/*#__PURE__*/\nfunction () {\n  function OperationsClient(gaxGrpc, // tslint:disable-next-line no-any\n  operationsProtos, options) {\n    var _this = this;\n\n    _classCallCheck(this, OperationsClient);\n\n    var opts = Object.assign({\n      servicePath: exports.SERVICE_ADDRESS,\n      port: DEFAULT_SERVICE_PORT,\n      clientConfig: {}\n    }, options);\n    var googleApiClient = ['gl-node/' + process.versions.node];\n\n    if (opts.libName && opts.libVersion) {\n      googleApiClient.push(opts.libName + '/' + opts.libVersion);\n    }\n\n    googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n\n    if (opts.fallback) {\n      googleApiClient.push('gl-web/' + version);\n    } else {\n      googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n    }\n\n    var defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, {\n      'x-goog-api-client': googleApiClient.join(' ')\n    });\n    this.auth = gaxGrpc.auth; // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this._innerApiCalls = {}; // Put together the \"service stub\" for\n    // google.longrunning.Operations.\n\n    var operationsStub = gaxGrpc.createStub(opts.fallback ? operationsProtos.lookupService('google.longrunning.Operations') : operationsProtos.google.longrunning.Operations, opts);\n    var operationsStubMethods = ['getOperation', 'listOperations', 'cancelOperation', 'deleteOperation'];\n\n    var _loop = function _loop() {\n      var methodName = _operationsStubMethod[_i];\n      var innerCallPromise = operationsStub.then(function (stub) {\n        return function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return stub[methodName].apply(stub, args);\n        };\n      }, function (err) {\n        return function () {\n          throw err;\n        };\n      });\n      _this._innerApiCalls[methodName] = createApiCall_1.createApiCall(innerCallPromise, defaults[methodName], PAGE_DESCRIPTORS[methodName]);\n    };\n\n    for (var _i = 0, _operationsStubMethod = operationsStubMethods; _i < _operationsStubMethod.length; _i++) {\n      _loop();\n    }\n  }\n\n  _createClass(OperationsClient, [{\n    key: \"getProjectId\",\n    value: function getProjectId(callback) {\n      if (this.auth && 'getProjectId' in this.auth) {\n        return this.auth.getProjectId(callback);\n      }\n\n      if (callback) {\n        callback(new Error('Cannot determine project ID.'));\n      } else {\n        return Promise.reject('Cannot determine project ID.');\n      }\n    } // Service calls\n\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}. The promise has a method named\n     * \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     */\n\n  }, {\n    key: \"getOperation\",\n    value: function getOperation(request, options, callback) {\n      if (options instanceof Function && callback === undefined) {\n        return this._innerApiCalls.getOperation(request, {}, options);\n      }\n\n      options = options || {};\n      return this._innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`.\n     *\n     * NOTE: the `name` binding below allows API services to override the binding\n     * to use different resource name schemes.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, it contains the\n     * result in a single response. If the response indicates the next page\n     * exists, the third parameter is set to be used for the next request object.\n     * The fourth parameter keeps the raw response object of an object\n     * representing [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, the array has\n     * three elements. The first element is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"} in a single response. The second\n     * element is the next request object if the response indicates the next page\n     * exists, or null. The third element is an object representing\n     * [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *     name: '',\n     *     filter: ''\n     * };\n     * // Iterate over all elements.\n     * const [resources] = await client.listOperations(request);\n     * for (const resource of resources) {\n     *   console.log(resources);\n     * }\n     *\n     * // Or obtain the paged response.\n     * const options = {autoPaginate: false};\n     * let nextRequest = request;\n     * while(nextRequest) {\n     *   const response = await client.listOperations(nextRequest, options);\n     *   const resources = response[0];\n     *   nextRequest = response[1];\n     *   const rawResponse = response[2];\n     *   for (const resource of resources) {\n     *     // doThingsWith(resource);\n     *   }\n     * };\n     */\n\n  }, {\n    key: \"listOperations\",\n    value: function listOperations(request, options, callback) {\n      if (options instanceof Function && callback === undefined) {\n        return this._innerApiCalls.listOperations(request, {}, options);\n      }\n\n      options = options || {};\n      return this._innerApiCalls.listOperations(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listOperations} continuously\n     * and invokes the callback registered for 'data' event for each element in\n     * the responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *   name: '',\n     *   filter: ''\n     * };\n     * client.listOperationsStream(request)\n     *   .on('data', element => {\n     *     // doThingsWith(element)\n     *   })\n     *   .on('error', err => {\n     *     console.error(err);\n     *   });\n     */\n\n  }, {\n    key: \"listOperationsStream\",\n    value: function listOperationsStream(request, options) {\n      return PAGE_DESCRIPTORS.listOperations.createStream(this._innerApiCalls.listOperations, request, options);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     */\n\n  }, {\n    key: \"cancelOperation\",\n    value: function cancelOperation(request, options, callback) {\n      if (options instanceof Function && callback === undefined) {\n        return this._innerApiCalls.cancelOperation(request, {}, options);\n      }\n\n      options = options || {};\n      return this._innerApiCalls.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     */\n\n  }, {\n    key: \"deleteOperation\",\n    value: function deleteOperation(request, options, callback) {\n      if (options instanceof Function && callback === undefined) {\n        return this._innerApiCalls.deleteOperation(request, {}, options);\n      }\n\n      options = options || {};\n      return this._innerApiCalls.deleteOperation(request, options, callback);\n    }\n  }]);\n\n  return OperationsClient;\n}();\n\nexports.OperationsClient = OperationsClient;\n\nvar OperationsClientBuilder =\n/**\n * Builds a new Operations Client\n * @param gaxGrpc {GrpcClient}\n */\nfunction OperationsClientBuilder(gaxGrpc) {\n  _classCallCheck(this, OperationsClientBuilder);\n\n  // tslint:disable-next-line no-any\n  var operationsProtos; // loaded protos have any type\n\n  if (gaxGrpc.fallback) {\n    var protoJson = require('../../protos/operations.json');\n\n    operationsProtos = gaxGrpc.loadProto(protoJson);\n  } else {\n    operationsProtos = gaxGrpc.loadProto(path.join(__dirname, '..', '..', 'protos', 'operations.json'));\n    Object.assign(this, operationsProtos.google.longrunning);\n  }\n  /**\n   * Build a new instance of {@link OperationsClient}.\n   *\n   * @param {Object=} opts - The optional parameters.\n   * @param {String=} opts.servicePath - Domain name of the API remote host.\n   * @param {number=} opts.port - The port on which to connect to the remote host.\n   * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n   * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n   */\n\n\n  this.operationsClient = function (opts) {\n    if (gaxGrpc.fallback) {\n      opts.fallback = true;\n    }\n\n    return new OperationsClient(gaxGrpc, operationsProtos, opts);\n  };\n\n  Object.assign(this.operationsClient, OperationsClient);\n};\n\nexports.OperationsClientBuilder = OperationsClientBuilder;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _classCallCheck = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ReadState;\n\n(function (ReadState) {\n  ReadState[ReadState[\"NO_DATA\"] = 0] = \"NO_DATA\";\n  ReadState[ReadState[\"READING_SIZE\"] = 1] = \"READING_SIZE\";\n  ReadState[ReadState[\"READING_MESSAGE\"] = 2] = \"READING_MESSAGE\";\n})(ReadState || (ReadState = {}));\n\nvar StreamDecoder =\n/*#__PURE__*/\nfunction () {\n  function StreamDecoder() {\n    _classCallCheck(this, StreamDecoder);\n\n    this.readState = ReadState.NO_DATA;\n    this.readCompressFlag = Buffer.alloc(1);\n    this.readPartialSize = Buffer.alloc(4);\n    this.readSizeRemaining = 4;\n    this.readMessageSize = 0;\n    this.readPartialMessage = [];\n    this.readMessageRemaining = 0;\n  }\n\n  _createClass(StreamDecoder, [{\n    key: \"write\",\n    value: function write(data) {\n      var readHead = 0;\n      var toRead;\n      var result = [];\n\n      while (readHead < data.length) {\n        switch (this.readState) {\n          case ReadState.NO_DATA:\n            this.readCompressFlag = data.slice(readHead, readHead + 1);\n            readHead += 1;\n            this.readState = ReadState.READING_SIZE;\n            this.readPartialSize.fill(0);\n            this.readSizeRemaining = 4;\n            this.readMessageSize = 0;\n            this.readMessageRemaining = 0;\n            this.readPartialMessage = [];\n            break;\n\n          case ReadState.READING_SIZE:\n            toRead = Math.min(data.length - readHead, this.readSizeRemaining);\n            data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);\n            this.readSizeRemaining -= toRead;\n            readHead += toRead; // readSizeRemaining >=0 here\n\n            if (this.readSizeRemaining === 0) {\n              this.readMessageSize = this.readPartialSize.readUInt32BE(0);\n              this.readMessageRemaining = this.readMessageSize;\n\n              if (this.readMessageRemaining > 0) {\n                this.readState = ReadState.READING_MESSAGE;\n              } else {\n                var message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);\n                this.readState = ReadState.NO_DATA;\n                result.push(message);\n              }\n            }\n\n            break;\n\n          case ReadState.READING_MESSAGE:\n            toRead = Math.min(data.length - readHead, this.readMessageRemaining);\n            this.readPartialMessage.push(data.slice(readHead, readHead + toRead));\n            this.readMessageRemaining -= toRead;\n            readHead += toRead; // readMessageRemaining >=0 here\n\n            if (this.readMessageRemaining === 0) {\n              // At this point, we have read a full message\n              var framedMessageBuffers = [this.readCompressFlag, this.readPartialSize].concat(this.readPartialMessage);\n              var framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);\n              this.readState = ReadState.NO_DATA;\n              result.push(framedMessage);\n            }\n\n            break;\n\n          default:\n            throw new Error('Unexpected read state');\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return StreamDecoder;\n}();\n\nexports.StreamDecoder = StreamDecoder;","map":null,"metadata":{},"sourceType":"script"}
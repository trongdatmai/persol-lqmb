{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019, Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar _classCallCheck = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar call_1 = require(\"../call\");\n\nvar gax_1 = require(\"../gax\");\n\nvar longrunning_1 = require(\"./longrunning\");\n\nvar LongrunningApiCaller =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates an API caller that performs polling on a long running operation.\n   *\n   * @private\n   * @constructor\n   * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n   * decoders used for unpacking responses and the operationsClient\n   * used for polling the operation.\n   */\n  function LongrunningApiCaller(longrunningDescriptor) {\n    _classCallCheck(this, LongrunningApiCaller);\n\n    this.longrunningDescriptor = longrunningDescriptor;\n  }\n\n  _createClass(LongrunningApiCaller, [{\n    key: \"init\",\n    value: function init(settings, callback) {\n      if (callback) {\n        return new call_1.OngoingCall(callback);\n      }\n\n      return new call_1.OngoingCallPromise(settings.promise);\n    }\n  }, {\n    key: \"wrap\",\n    value: function wrap(func) {\n      return func;\n    }\n  }, {\n    key: \"call\",\n    value: function call(apiCall, argument, settings, canceller) {\n      var _this = this;\n\n      canceller.call(function (argument, callback) {\n        return _this._wrapOperation(apiCall, settings, argument, callback);\n      }, argument);\n    }\n  }, {\n    key: \"_wrapOperation\",\n    value: function _wrapOperation(apiCall, settings, argument, callback) {\n      var backoffSettings = settings.longrunning;\n\n      if (!backoffSettings) {\n        backoffSettings = gax_1.createDefaultBackoffSettings();\n      }\n\n      var longrunningDescriptor = this.longrunningDescriptor;\n      return apiCall(argument, function (err, rawResponse) {\n        if (err) {\n          callback(err, null, null, rawResponse);\n          return;\n        }\n\n        var operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n        callback(null, operation, rawResponse);\n      });\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(canceller, err) {\n      canceller.callback(err);\n    }\n  }, {\n    key: \"result\",\n    value: function result(canceller) {\n      return canceller.promise;\n    }\n  }]);\n\n  return LongrunningApiCaller;\n}();\n\nexports.LongrunningApiCaller = LongrunningApiCaller;","map":null,"metadata":{},"sourceType":"script"}
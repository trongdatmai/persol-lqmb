{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019, Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar _classCallCheck = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar warnings_1 = require(\"../warnings\");\n\nvar streaming_1 = require(\"./streaming\");\n\nvar StreamingApiCaller =\n/*#__PURE__*/\nfunction () {\n  /**\n   * An API caller for methods of gRPC streaming.\n   * @private\n   * @constructor\n   * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\n   */\n  function StreamingApiCaller(descriptor) {\n    _classCallCheck(this, StreamingApiCaller);\n\n    this.descriptor = descriptor;\n  }\n\n  _createClass(StreamingApiCaller, [{\n    key: \"init\",\n    value: function init(settings, callback) {\n      return new streaming_1.StreamProxy(this.descriptor.type, callback);\n    }\n  }, {\n    key: \"wrap\",\n    value: function wrap(func) {\n      switch (this.descriptor.type) {\n        case streaming_1.StreamType.SERVER_STREAMING:\n          return function (argument, metadata, options) {\n            return func(argument, metadata, options);\n          };\n\n        case streaming_1.StreamType.CLIENT_STREAMING:\n          return function (argument, metadata, options, callback) {\n            return func(metadata, options, callback);\n          };\n\n        case streaming_1.StreamType.BIDI_STREAMING:\n          return function (argument, metadata, options) {\n            return func(metadata, options);\n          };\n\n        default:\n          warnings_1.warn('streaming_wrap_unknown_stream_type', \"Unknown stream type: \".concat(this.descriptor.type));\n      }\n\n      return func;\n    }\n  }, {\n    key: \"call\",\n    value: function call(apiCall, argument, settings, stream) {\n      stream.setStream(apiCall, argument);\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(stream, err) {\n      stream.emit('error', err);\n    }\n  }, {\n    key: \"result\",\n    value: function result(stream) {\n      return stream;\n    }\n  }]);\n\n  return StreamingApiCaller;\n}();\n\nexports.StreamingApiCaller = StreamingApiCaller;","map":null,"metadata":{},"sourceType":"script"}
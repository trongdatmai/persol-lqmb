{"ast":null,"code":"/*! firebase-admin v8.9.0 */\n\"use strict\";\n/*!\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar credential_1 = require(\"../auth/credential\");\n\nvar validator = require(\"./validator\");\n/**\n * Renames properties on an object given a mapping from old to new property names.\n *\n * For example, this can be used to map underscore_cased properties to camelCase.\n *\n * @param {object} obj The object whose properties to rename.\n * @param {object} keyMap The mapping from old to new property names.\n */\n\n\nfunction renameProperties(obj, keyMap) {\n  Object.keys(keyMap).forEach(function (oldKey) {\n    if (oldKey in obj) {\n      var newKey = keyMap[oldKey]; // The old key's value takes precedence over the new key's value.\n\n      obj[newKey] = obj[oldKey];\n      delete obj[oldKey];\n    }\n  });\n}\n\nexports.renameProperties = renameProperties;\n/**\n * Defines a new read-only property directly on an object and returns the object.\n *\n * @param {object} obj The object on which to define the property.\n * @param {string} prop The name of the property to be defined or modified.\n * @param {any} value The value associated with the property.\n */\n\nfunction addReadonlyGetter(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value: value,\n    // Make this property read-only.\n    writable: false,\n    // Include this property during enumeration of obj's properties.\n    enumerable: true\n  });\n}\n\nexports.addReadonlyGetter = addReadonlyGetter;\n/**\n * Determines the Google Cloud project ID associated with a Firebase app by examining\n * the Firebase app options, credentials and the local environment in that order.\n *\n * @param {FirebaseApp} app A Firebase app to get the project ID from.\n *\n * @return {string} A project ID string or null.\n */\n\nfunction getProjectId(app) {\n  var options = app.options;\n\n  if (validator.isNonEmptyString(options.projectId)) {\n    return options.projectId;\n  }\n\n  var cert = credential_1.tryGetCertificate(options.credential);\n\n  if (cert != null && validator.isNonEmptyString(cert.projectId)) {\n    return cert.projectId;\n  }\n\n  var projectId = process.env.GOOGLE_CLOUD_PROJECT || process.env.GCLOUD_PROJECT;\n\n  if (validator.isNonEmptyString(projectId)) {\n    return projectId;\n  }\n\n  return null;\n}\n\nexports.getProjectId = getProjectId;\n/**\n * Determines the Google Cloud project ID associated with a Firebase app by examining\n * the Firebase app options, credentials and the local environment in that order. This\n * is an async wrapper of the getProjectId method. This enables us to migrate the rest\n * of the SDK into asynchronously determining the current project ID. See b/143090254.\n *\n * @param {FirebaseApp} app A Firebase app to get the project ID from.\n *\n * @return {Promise<string | null>} A project ID string or null.\n */\n\nfunction findProjectId(app) {\n  return Promise.resolve(getProjectId(app));\n}\n\nexports.findProjectId = findProjectId;\n/**\n * Encodes data using web-safe-base64.\n *\n * @param {Buffer} data The raw data byte input.\n * @return {string} The base64-encoded result.\n */\n\nfunction toWebSafeBase64(data) {\n  return data.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n}\n\nexports.toWebSafeBase64 = toWebSafeBase64;\n/**\n * Formats a string of form 'project/{projectId}/{api}' and replaces\n * with corresponding arguments {projectId: '1234', api: 'resource'}\n * and returns output: 'project/1234/resource'.\n *\n * @param {string} str The original string where the param need to be\n *     replaced.\n * @param {object=} params The optional parameters to replace in the\n *     string.\n * @return {string} The resulting formatted string.\n */\n\nfunction formatString(str, params) {\n  var formatted = str;\n  Object.keys(params || {}).forEach(function (key) {\n    formatted = formatted.replace(new RegExp('{' + key + '}', 'g'), params[key]);\n  });\n  return formatted;\n}\n\nexports.formatString = formatString;\n/**\n * Generates the update mask for the provided object.\n * Note this will ignore the last key with value undefined.\n *\n * @param {[key: string]: any} obj The object to generate the update mask for.\n * @return {Array<string>} The computed update mask list.\n */\n\nfunction generateUpdateMask(obj) {\n  var updateMask = [];\n\n  if (!validator.isNonNullObject(obj)) {\n    return updateMask;\n  }\n\n  var _loop_1 = function _loop_1(key) {\n    if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n      var maskList = generateUpdateMask(obj[key]);\n\n      if (maskList.length > 0) {\n        maskList.forEach(function (mask) {\n          updateMask.push(key + \".\" + mask);\n        });\n      } else {\n        updateMask.push(key);\n      }\n    }\n  };\n\n  for (var key in obj) {\n    _loop_1(key);\n  }\n\n  return updateMask;\n}\n\nexports.generateUpdateMask = generateUpdateMask;","map":null,"metadata":{},"sourceType":"script"}
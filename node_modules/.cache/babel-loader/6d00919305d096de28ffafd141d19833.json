{"ast":null,"code":"'use strict';\n\nvar mimicFn = require('mimic-fn');\n\nvar calledFunctions = new WeakMap();\n\nvar oneTime = function oneTime(fn) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof fn !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  var ret;\n  var isCalled = false;\n  var callCount = 0;\n  var functionName = fn.displayName || fn.name || '<anonymous>';\n\n  var onetime = function onetime() {\n    calledFunctions.set(onetime, ++callCount);\n\n    if (isCalled) {\n      if (options.throw === true) {\n        throw new Error(\"Function `\".concat(functionName, \"` can only be called once\"));\n      }\n\n      return ret;\n    }\n\n    isCalled = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    ret = fn.apply(this, args);\n    fn = null;\n    return ret;\n  };\n\n  mimicFn(onetime, fn);\n  calledFunctions.set(onetime, callCount);\n  return onetime;\n};\n\nmodule.exports = oneTime; // TODO: Remove this for the next major release\n\nmodule.exports.default = oneTime;\n\nmodule.exports.callCount = function (fn) {\n  if (!calledFunctions.has(fn)) {\n    throw new Error(\"The given function `\".concat(fn.name, \"` is not wrapped by the `onetime` package\"));\n  }\n\n  return calledFunctions.get(fn);\n};","map":null,"metadata":{},"sourceType":"script"}
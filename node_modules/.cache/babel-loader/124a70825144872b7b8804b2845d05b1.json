{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar net = require('net');\n\nvar tls = require('tls');\n\nvar url = require('url');\n\nvar assert = require('assert');\n\nvar Agent = require('agent-base');\n\nvar inherits = require('util').inherits;\n\nvar debug = require('debug')('https-proxy-agent');\n/**\n * Module exports.\n */\n\n\nmodule.exports = HttpsProxyAgent;\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to the\n * specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * @api public\n */\n\nfunction HttpsProxyAgent(opts) {\n  if (!(this instanceof HttpsProxyAgent)) return new HttpsProxyAgent(opts);\n  if ('string' == typeof opts) opts = url.parse(opts);\n  if (!opts) throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n  debug('creating new HttpsProxyAgent instance: %o', opts);\n  Agent.call(this, opts);\n  var proxy = Object.assign({}, opts); // if `true`, then connect to the proxy server over TLS. defaults to `false`.\n\n  this.secureProxy = proxy.protocol ? /^https:?$/i.test(proxy.protocol) : false; // prefer `hostname` over `host`, and set the `port` if needed\n\n  proxy.host = proxy.hostname || proxy.host;\n  proxy.port = +proxy.port || (this.secureProxy ? 443 : 80); // ALPN is supported by Node.js >= v5.\n  // attempt to negotiate http/1.1 for proxy servers that support http/2\n\n  if (this.secureProxy && !('ALPNProtocols' in proxy)) {\n    proxy.ALPNProtocols = ['http 1.1'];\n  }\n\n  if (proxy.host && proxy.path) {\n    // if both a `host` and `path` are specified then it's most likely the\n    // result of a `url.parse()` call... we need to remove the `path` portion so\n    // that `net.connect()` doesn't attempt to open that as a unix socket file.\n    delete proxy.path;\n    delete proxy.pathname;\n  }\n\n  this.proxy = proxy;\n}\n\ninherits(HttpsProxyAgent, Agent);\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\nHttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {\n  var proxy = this.proxy; // create a socket connection to the proxy server\n\n  var socket;\n\n  if (this.secureProxy) {\n    socket = tls.connect(proxy);\n  } else {\n    socket = net.connect(proxy);\n  } // we need to buffer any HTTP traffic that happens with the proxy before we get\n  // the CONNECT response, so that if the response is anything other than an \"200\"\n  // response code, then we can re-play the \"data\" events on the socket once the\n  // HTTP parser is hooked up...\n\n\n  var buffers = [];\n  var buffersLength = 0;\n\n  function read() {\n    var b = socket.read();\n    if (b) ondata(b);else socket.once('readable', read);\n  }\n\n  function cleanup() {\n    socket.removeListener('end', onend);\n    socket.removeListener('error', onerror);\n    socket.removeListener('close', onclose);\n    socket.removeListener('readable', read);\n  }\n\n  function onclose(err) {\n    debug('onclose had error %o', err);\n  }\n\n  function onend() {\n    debug('onend');\n  }\n\n  function onerror(err) {\n    cleanup();\n    fn(err);\n  }\n\n  function ondata(b) {\n    buffers.push(b);\n    buffersLength += b.length;\n    var buffered = Buffer.concat(buffers, buffersLength);\n    var str = buffered.toString('ascii');\n\n    if (!~str.indexOf('\\r\\n\\r\\n')) {\n      // keep buffering\n      debug('have not received end of HTTP headers yet...');\n      read();\n      return;\n    }\n\n    var firstLine = str.substring(0, str.indexOf('\\r\\n'));\n    var statusCode = +firstLine.split(' ')[1];\n    debug('got proxy server response: %o', firstLine);\n\n    if (200 == statusCode) {\n      // 200 Connected status code!\n      var sock = socket; // nullify the buffered data since we won't be needing it\n\n      buffers = buffered = null;\n\n      if (opts.secureEndpoint) {\n        // since the proxy is connecting to an SSL server, we have\n        // to upgrade this socket connection to an SSL connection\n        debug('upgrading proxy-connected socket to TLS connection: %o', opts.host);\n        opts.socket = socket;\n        opts.servername = opts.servername || opts.host;\n        opts.host = null;\n        opts.hostname = null;\n        opts.port = null;\n        sock = tls.connect(opts);\n      }\n\n      cleanup();\n      req.once('socket', resume);\n      fn(null, sock);\n    } else {\n      // some other status code that's not 200... need to re-play the HTTP header\n      // \"data\" events onto the socket once the HTTP machinery is attached so\n      // that the node core `http` can parse and handle the error status code\n      cleanup(); // the original socket is closed, and a new closed socket is\n      // returned instead, so that the proxy doesn't get the HTTP request\n      // written to it (which may contain `Authorization` headers or other\n      // sensitive data).\n      //\n      // See: https://hackerone.com/reports/541502\n\n      socket.destroy();\n      socket = new net.Socket();\n      socket.readable = true; // save a reference to the concat'd Buffer for the `onsocket` callback\n\n      buffers = buffered; // need to wait for the \"socket\" event to re-play the \"data\" events\n\n      req.once('socket', onsocket);\n      fn(null, socket);\n    }\n  }\n\n  function onsocket(socket) {\n    debug('replaying proxy buffer for failed request');\n    assert(socket.listenerCount('data') > 0); // replay the \"buffers\" Buffer onto the `socket`, since at this point\n    // the HTTP module machinery has been hooked up for the user\n\n    socket.push(buffers); // nullify the cached Buffer instance\n\n    buffers = null;\n  }\n\n  socket.on('error', onerror);\n  socket.on('close', onclose);\n  socket.on('end', onend);\n  read();\n  var hostname = opts.host + ':' + opts.port;\n  var msg = 'CONNECT ' + hostname + ' HTTP/1.1\\r\\n';\n  var headers = Object.assign({}, proxy.headers);\n\n  if (proxy.auth) {\n    headers['Proxy-Authorization'] = 'Basic ' + Buffer.from(proxy.auth).toString('base64');\n  } // the Host header should only include the port\n  // number when it is a non-standard port\n\n\n  var host = opts.host;\n\n  if (!isDefaultPort(opts.port, opts.secureEndpoint)) {\n    host += ':' + opts.port;\n  }\n\n  headers['Host'] = host;\n  headers['Connection'] = 'close';\n  Object.keys(headers).forEach(function (name) {\n    msg += name + ': ' + headers[name] + '\\r\\n';\n  });\n  socket.write(msg + '\\r\\n');\n};\n/**\n * Resumes a socket.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket to resume\n * @api public\n */\n\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction isDefaultPort(port, secure) {\n  return Boolean(!secure && port === 80 || secure && port === 443);\n}","map":null,"metadata":{},"sourceType":"script"}
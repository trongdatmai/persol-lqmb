{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constants_1 = require(\"./constants\");\n\nvar _logger = console;\nvar _logVerbosity = constants_1.LogVerbosity.ERROR;\n\nif (process.env.GRPC_VERBOSITY) {\n  switch (process.env.GRPC_VERBOSITY) {\n    case 'DEBUG':\n      _logVerbosity = constants_1.LogVerbosity.DEBUG;\n      break;\n\n    case 'INFO':\n      _logVerbosity = constants_1.LogVerbosity.INFO;\n      break;\n\n    case 'ERROR':\n      _logVerbosity = constants_1.LogVerbosity.ERROR;\n      break;\n\n    default: // Ignore any other values\n\n  }\n}\n\nexports.getLogger = function () {\n  return _logger;\n};\n\nexports.setLogger = function (logger) {\n  _logger = logger;\n};\n\nexports.setLoggerVerbosity = function (verbosity) {\n  _logVerbosity = verbosity;\n}; // tslint:disable-next-line no-any\n\n\nexports.log = function (severity) {\n  if (severity >= _logVerbosity && typeof _logger.error === 'function') {\n    var _logger2;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_logger2 = _logger).error.apply(_logger2, args);\n  }\n};\n\nvar enabledTracers = process.env.GRPC_TRACE ? process.env.GRPC_TRACE.split(',') : [];\nvar allEnabled = enabledTracers.includes('all');\n\nfunction trace(severity, tracer, text) {\n  if (allEnabled || enabledTracers.includes(tracer)) {\n    exports.log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\n\nexports.trace = trace;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar _classCallCheck = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar duplexify = require('duplexify');\n\nvar retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\n\n\nvar StreamType;\n\n(function (StreamType) {\n  /** Client sends a single request, server streams responses. */\n  StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n  /** Client streams requests, server returns a single response. */\n\n  StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n  /** Both client and server stream objects. */\n\n  StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType = exports.StreamType || (exports.StreamType = {}));\n\nvar StreamProxy =\n/*#__PURE__*/\nfunction (_duplexify) {\n  _inherits(StreamProxy, _duplexify);\n\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  function StreamProxy(type, callback) {\n    var _this;\n\n    _classCallCheck(this, StreamProxy);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamProxy).call(this, undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING\n    }));\n    _this.type = type;\n    _this._callback = callback;\n    _this._isCancelCalled = false;\n    return _this;\n  }\n\n  _createClass(StreamProxy, [{\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.stream) {\n        this.stream.cancel();\n      } else {\n        this._isCancelCalled = true;\n      }\n    }\n    /**\n     * Forward events from an API request stream to the user's stream.\n     * @param {Stream} stream - The API request stream.\n     */\n\n  }, {\n    key: \"forwardEvents\",\n    value: function forwardEvents(stream) {\n      var _this2 = this;\n\n      var eventsToForward = ['metadata', 'response', 'status'];\n      eventsToForward.forEach(function (event) {\n        stream.on(event, _this2.emit.bind(_this2, event));\n      }); // We also want to supply the status data as 'response' event to support\n      // the behavior of google-cloud-node expects.\n      // see:\n      // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n      // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n\n      stream.on('metadata', function (metadata) {\n        // Create a response object with succeeds.\n        // TODO: unify this logic with the decoration of gRPC response when it's\n        // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n        stream.emit('response', {\n          code: 200,\n          details: '',\n          message: 'OK',\n          metadata: metadata\n        });\n      });\n    }\n    /**\n     * Specifies the target stream.\n     * @param {ApiCall} apiCall - the API function to be called.\n     * @param {Object} argument - the argument to be passed to the apiCall.\n     */\n\n  }, {\n    key: \"setStream\",\n    value: function setStream(apiCall, argument) {\n      var _this3 = this;\n\n      if (this.type === StreamType.SERVER_STREAMING) {\n        var retryStream = retryRequest(null, {\n          objectMode: true,\n          request: function request() {\n            if (_this3._isCancelCalled) {\n              if (_this3.stream) {\n                _this3.stream.cancel();\n              }\n\n              return;\n            }\n\n            var stream = apiCall(argument, _this3._callback);\n            _this3.stream = stream;\n\n            _this3.forwardEvents(stream);\n\n            return stream;\n          }\n        });\n        this.setReadable(retryStream);\n        return;\n      }\n\n      var stream = apiCall(argument, this._callback);\n      this.stream = stream;\n      this.forwardEvents(stream);\n\n      if (this.type === StreamType.CLIENT_STREAMING) {\n        this.setWritable(stream);\n      }\n\n      if (this.type === StreamType.BIDI_STREAMING) {\n        this.setReadable(stream);\n        this.setWritable(stream);\n      }\n\n      if (this._isCancelCalled && this.stream) {\n        this.stream.cancel();\n      }\n    }\n  }]);\n\n  return StreamProxy;\n}(duplexify);\n\nexports.StreamProxy = StreamProxy;","map":null,"metadata":{},"sourceType":"script"}
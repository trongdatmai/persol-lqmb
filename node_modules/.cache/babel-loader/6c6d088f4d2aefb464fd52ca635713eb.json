{"ast":null,"code":"import _toConsumableArray from \"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/maidat/Desktop/team-lq/persol-lqmb/src/components/Profile/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardBody, CardHeader, Col, FormGroup, Input, Label, Row, Button, CardImg } from \"reactstrap\";\nimport firebase from \"./../../config\";\n\nvar Profile = function Profile(_ref) {\n  var changeStatusProgress = _ref.changeStatusProgress;\n  var ref = firebase.database();\n\n  var _useState = useState(JSON.parse(localStorage.getItem(\"account\") || \"{}\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      keyAccount = _useState4[0],\n      setKeyAccount = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isSave = _useState6[0],\n      setSave = _useState6[1];\n\n  var _useState7 = useState({\n    top: false,\n    jungle: false,\n    mid: false,\n    ad: false,\n    support: false\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      role = _useState8[0],\n      setRole = _useState8[1];\n\n  useEffect(function () {\n    changeStatusProgress(true);\n    ref.ref(\"users\").orderByChild(\"username\").equalTo(account.username).on(\"value\", function (snapshot) {\n      if (snapshot.val() !== null) {\n        var _Object$values = Object.values(snapshot.val()),\n            _Object$values2 = _slicedToArray(_Object$values, 1),\n            acc = _Object$values2[0];\n\n        setAccount(acc);\n        setKeyAccount(Object.keys(snapshot.val()));\n      }\n\n      changeStatusProgress(false);\n    });\n  }, []);\n  useEffect(function () {\n    setSave(false);\n  }, [account, role]);\n\n  var updateProfile =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              changeStatusProgress(true); // const roles = Object.values(role)\n              //   .map((val, index) => val && Object.keys(role)[index])\n              //   .filter(Boolean);\n              // let accUpdate;\n              // if (roles.length) {\n              //   accUpdate = { ...account, role: roles };\n              // } else {\n              //   accUpdate = { ...account };\n              // }\n\n              console.log(account);\n              ref.ref().child(\"/users/\" + keyAccount).update(account, function () {\n                setSave(true);\n                changeStatusProgress(false);\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function updateProfile() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: \"12\",\n    sm: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Profile\"), React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \" Form\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Label, {\n    htmlFor: \"company\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Username\"), React.createElement(Input, {\n    type: \"text\",\n    readOnly: true,\n    value: account.username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Label, {\n    htmlFor: \"Ingame\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Ingame\"), React.createElement(Input, {\n    type: \"text\",\n    id: \"Ingame\",\n    placeholder: \"PS.abcxyz\",\n    value: account.ingame,\n    onChange: function onChange(_ref3) {\n      var value = _ref3.target.value;\n      return setAccount(function (prev) {\n        return _objectSpread({}, prev, {\n          ingame: value\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Col, {\n    md: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Role\")), React.createElement(Col, {\n    md: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    check: true,\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: \"form-check-input\",\n    type: \"checkbox\",\n    id: \"Top\",\n    checked: account.role && account.role.some(function (i) {\n      return i === \"top\";\n    }),\n    onChange: function onChange(_ref4) {\n      var checked = _ref4.target.checked;\n      console.log(checked);\n      setAccount(function (prev) {\n        var tmp;\n\n        if (checked) {\n          tmp = account.role.length ? _objectSpread({}, prev, {\n            role: [].concat(_toConsumableArray(account.role), [\"top\"])\n          }) : _objectSpread({}, prev, {\n            role: [\"top\"]\n          });\n        } else {\n          var newRole = _toConsumableArray(account.role).filter(function (i) {\n            return i !== \"top\";\n          });\n\n          tmp = _objectSpread({}, prev, {\n            role: newRole\n          });\n        }\n\n        console.log(tmp);\n        return tmp;\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(Label, {\n    check: true,\n    className: \"form-check-label\",\n    htmlFor: \"Top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Top\")), React.createElement(FormGroup, {\n    check: true,\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: \"form-check-input\",\n    type: \"checkbox\",\n    id: \"Jungle\",\n    defaultChecked: account.role && account.role.some(function (i) {\n      return i === \"jungle\";\n    }),\n    onChange: function onChange(_ref5) {\n      var checked = _ref5.target.checked;\n      return setRole(function (prev) {\n        return _objectSpread({}, prev, {\n          jungle: checked\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(Label, {\n    check: true,\n    className: \"form-check-label\",\n    htmlFor: \"Jungle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Jungle\")), React.createElement(FormGroup, {\n    check: true,\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: \"form-check-input\",\n    type: \"checkbox\",\n    id: \"Mid\",\n    defaultChecked: account.role && account.role.some(function (i) {\n      return i === \"mid\";\n    }),\n    onChange: function onChange(_ref6) {\n      var checked = _ref6.target.checked;\n      return setRole(function (prev) {\n        return _objectSpread({}, prev, {\n          mid: checked\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(Label, {\n    check: true,\n    className: \"form-check-label\",\n    htmlFor: \"Mid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Mid\")), React.createElement(FormGroup, {\n    check: true,\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: \"form-check-input\",\n    type: \"checkbox\",\n    id: \"Ad\",\n    defaultChecked: account.role && account.role.some(function (i) {\n      return i === \"ad\";\n    }),\n    onChange: function onChange(_ref7) {\n      var checked = _ref7.target.checked;\n      return setRole(function (prev) {\n        return _objectSpread({}, prev, {\n          ad: checked\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), React.createElement(Label, {\n    check: true,\n    className: \"form-check-label\",\n    htmlFor: \"Ad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"Ad\")), React.createElement(FormGroup, {\n    check: true,\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: \"form-check-input\",\n    type: \"checkbox\",\n    id: \"Support\",\n    defaultChecked: account.role && account.role.some(function (i) {\n      return i === \"support\";\n    }),\n    onChange: function onChange(_ref8) {\n      var checked = _ref8.target.checked;\n      return setRole(function (prev) {\n        return _objectSpread({}, prev, {\n          support: checked\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }), React.createElement(Label, {\n    check: true,\n    className: \"form-check-label\",\n    htmlFor: \"Support\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"Support\")))), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, React.createElement(Col, {\n    md: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, React.createElement(Label, {\n    htmlFor: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }, \"Rank\")), React.createElement(Col, {\n    xs: \"12\",\n    md: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"select\",\n    name: \"select\",\n    id: \"select\",\n    value: account.rank,\n    onChange: function onChange(_ref9) {\n      var value = _ref9.target.value;\n      return setAccount(function (prev) {\n        return _objectSpread({}, prev, {\n          rank: value\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, \"Please select\"), React.createElement(\"option\", {\n    value: \"Bronze\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }, \"Bronze\"), React.createElement(\"option\", {\n    value: \"Silver\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"Silver\"), React.createElement(\"option\", {\n    value: \"Gold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }, \"Gold\"), React.createElement(\"option\", {\n    value: \"Platinum\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }, \"Platinum\"), React.createElement(\"option\", {\n    value: \"Diamond\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307\n    },\n    __self: this\n  }, \"Diamond\"), React.createElement(\"option\", {\n    value: \"Veteran\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }, \"Veteran\"), React.createElement(\"option\", {\n    value: \"Master\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }, \"Master\"), React.createElement(\"option\", {\n    value: \"Challenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }, \"Challenger\")))), React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314\n    },\n    __self: this\n  }, React.createElement(Label, {\n    htmlFor: \"Avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, \"Avatar \"), React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }, \"(Url)\"), React.createElement(Input, {\n    type: \"text\",\n    id: \"Avatar\",\n    placeholder: \"https://pornhub.com/avatar/MariaOzawa\",\n    value: account.avatar,\n    onChange: function onChange(_ref10) {\n      var value = _ref10.target.value;\n      return setAccount(function (prev) {\n        return _objectSpread({}, prev, {\n          avatar: value\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }), account.avatar && React.createElement(React.Fragment, null, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331\n    },\n    __self: this\n  }), React.createElement(Label, {\n    htmlFor: \"Avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332\n    },\n    __self: this\n  }, \"Preview \"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }), React.createElement(CardImg, {\n    src: account.avatar,\n    alt: \"avatar\",\n    style: {\n      width: \"200px\",\n      border: \"5px solid rgba(0,0,0, .4)\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345\n    },\n    __self: this\n  }, React.createElement(Col, {\n    col: \"6\",\n    sm: \"4\",\n    md: \"2\",\n    xl: true,\n    className: \"mb-3 mb-xl-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346\n    },\n    __self: this\n  }, React.createElement(Button, {\n    block: true,\n    color: isSave ? \"success\" : \"primary\",\n    disabled: isSave,\n    onClick: updateProfile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347\n    },\n    __self: this\n  }, isSave ? \"Success ✓\" : \"Save\")))))));\n};\n\nexport default Profile;","map":{"version":3,"sources":["/Users/maidat/Desktop/team-lq/persol-lqmb/src/components/Profile/index.js"],"names":["React","useState","useEffect","Card","CardBody","CardHeader","Col","FormGroup","Input","Label","Row","Button","CardImg","firebase","Profile","changeStatusProgress","ref","database","JSON","parse","localStorage","getItem","account","setAccount","keyAccount","setKeyAccount","isSave","setSave","top","jungle","mid","ad","support","role","setRole","orderByChild","equalTo","username","on","snapshot","val","Object","values","acc","keys","updateProfile","console","log","child","update","ingame","value","target","prev","some","i","checked","tmp","length","newRole","filter","rank","avatar","width","border"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  FormGroup,\n  Input,\n  Label,\n  Row,\n  Button,\n  CardImg\n} from \"reactstrap\";\nimport firebase from \"./../../config\";\n\nconst Profile = ({ changeStatusProgress }) => {\n  const ref = firebase.database();\n  const [account, setAccount] = useState(\n    JSON.parse(localStorage.getItem(\"account\") || \"{}\")\n  );\n  const [keyAccount, setKeyAccount] = useState(\"\");\n  const [isSave, setSave] = useState(false);\n  const [role, setRole] = useState({\n    top: false,\n    jungle: false,\n    mid: false,\n    ad: false,\n    support: false\n  });\n  useEffect(() => {\n    changeStatusProgress(true);\n    ref\n      .ref(\"users\")\n      .orderByChild(\"username\")\n      .equalTo(account.username)\n      .on(\"value\", snapshot => {\n        if (snapshot.val() !== null) {\n          const [acc] = Object.values(snapshot.val());\n          setAccount(acc);\n          setKeyAccount(Object.keys(snapshot.val()));\n        }\n        changeStatusProgress(false);\n      });\n  }, []);\n  useEffect(() => {\n    setSave(false);\n  }, [account, role]);\n\n  const updateProfile = async () => {\n    changeStatusProgress(true);\n    // const roles = Object.values(role)\n    //   .map((val, index) => val && Object.keys(role)[index])\n    //   .filter(Boolean);\n    // let accUpdate;\n    // if (roles.length) {\n    //   accUpdate = { ...account, role: roles };\n    // } else {\n    //   accUpdate = { ...account };\n    // }\n    console.log(account);\n    ref\n      .ref()\n      .child(\"/users/\" + keyAccount)\n      .update(account, () => {\n        setSave(true);\n        changeStatusProgress(false);\n      });\n  };\n\n  return (\n    <Row>\n      <Col xs=\"12\" sm=\"12\">\n        <Card>\n          <CardHeader>\n            <strong>Profile</strong>\n            <small> Form</small>\n          </CardHeader>\n          <CardBody>\n            <FormGroup>\n              <Label htmlFor=\"company\">Username</Label>\n              <Input type=\"text\" readOnly={true} value={account.username} />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"Ingame\">Ingame</Label>\n              <Input\n                type=\"text\"\n                id=\"Ingame\"\n                placeholder=\"PS.abcxyz\"\n                value={account.ingame}\n                onChange={({ target: { value } }) =>\n                  setAccount(prev => ({\n                    ...prev,\n                    ingame: value\n                  }))\n                }\n              />\n            </FormGroup>\n            <FormGroup row>\n              <Col md=\"12\">\n                <Label>Role</Label>\n              </Col>\n              <Col md=\"12\">\n                <FormGroup check className=\"checkbox\">\n                  <Input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"Top\"\n                    checked={\n                      account.role && account.role.some(i => i === \"top\")\n                    }\n                    onChange={({ target: { checked } }) => {\n                        console.log(checked)\n                      setAccount(prev => {\n                        let tmp;\n                        if (checked) {\n                          tmp = account.role.length\n                            ? { ...prev, role: [...account.role, \"top\"] }\n                            : { ...prev, role: [\"top\"] };\n                        } else {\n                          const newRole = [...account.role].filter(\n                            i => i !== \"top\"\n                          );\n                          tmp = { ...prev, role: newRole };\n                        }\n                        console.log(tmp);\n                        return tmp;\n                      });\n                    }}\n                  />\n                  <Label check className=\"form-check-label\" htmlFor=\"Top\">\n                    Top\n                  </Label>\n                </FormGroup>\n                <FormGroup check className=\"checkbox\">\n                  <Input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"Jungle\"\n                    defaultChecked={\n                      account.role && account.role.some(i => i === \"jungle\")\n                    }\n                    onChange={({ target: { checked } }) =>\n                      setRole(prev => ({ ...prev, jungle: checked }))\n                    }\n                  />\n                  <Label check className=\"form-check-label\" htmlFor=\"Jungle\">\n                    Jungle\n                  </Label>\n                </FormGroup>\n                <FormGroup check className=\"checkbox\">\n                  <Input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"Mid\"\n                    defaultChecked={\n                      account.role && account.role.some(i => i === \"mid\")\n                    }\n                    onChange={({ target: { checked } }) =>\n                      setRole(prev => ({ ...prev, mid: checked }))\n                    }\n                  />\n                  <Label check className=\"form-check-label\" htmlFor=\"Mid\">\n                    Mid\n                  </Label>\n                </FormGroup>\n                <FormGroup check className=\"checkbox\">\n                  <Input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"Ad\"\n                    defaultChecked={\n                      account.role && account.role.some(i => i === \"ad\")\n                    }\n                    onChange={({ target: { checked } }) =>\n                      setRole(prev => ({ ...prev, ad: checked }))\n                    }\n                  />\n                  <Label check className=\"form-check-label\" htmlFor=\"Ad\">\n                    Ad\n                  </Label>\n                </FormGroup>\n                <FormGroup check className=\"checkbox\">\n                  <Input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"Support\"\n                    defaultChecked={\n                      account.role && account.role.some(i => i === \"support\")\n                    }\n                    onChange={({ target: { checked } }) =>\n                      setRole(prev => ({ ...prev, support: checked }))\n                    }\n                  />\n                  <Label check className=\"form-check-label\" htmlFor=\"Support\">\n                    Support\n                  </Label>\n                </FormGroup>\n              </Col>\n            </FormGroup>\n\n            {/* <FormGroup row>\n              <Col md=\"12\">\n                <Label>Role</Label>\n              </Col>\n              <Col md=\"12\">\n                <FormGroup check className=\"checkbox\">\n                  <Input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"Top\"\n                    defaultChecked={\n                      account.role && account.role.some(i => i === \"top\")\n                    }\n                    onChange={({ target: { checked } }) =>\n                      setRole(prev => ({ ...prev, top: checked }))\n                    }\n                  />\n                  <Label check className=\"form-check-label\" htmlFor=\"Top\">\n                    Top\n                  </Label>\n                </FormGroup>\n                <FormGroup check className=\"checkbox\">\n                  <Input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"Jungle\"\n                    defaultChecked={\n                      account.role && account.role.some(i => i === \"jungle\")\n                    }\n                    onChange={({ target: { checked } }) =>\n                      setRole(prev => ({ ...prev, jungle: checked }))\n                    }\n                  />\n                  <Label check className=\"form-check-label\" htmlFor=\"Jungle\">\n                    Jungle\n                  </Label>\n                </FormGroup>\n                <FormGroup check className=\"checkbox\">\n                  <Input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"Mid\"\n                    defaultChecked={\n                      account.role && account.role.some(i => i === \"mid\")\n                    }\n                    onChange={({ target: { checked } }) =>\n                      setRole(prev => ({ ...prev, mid: checked }))\n                    }\n                  />\n                  <Label check className=\"form-check-label\" htmlFor=\"Mid\">\n                    Mid\n                  </Label>\n                </FormGroup>\n                <FormGroup check className=\"checkbox\">\n                  <Input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"Ad\"\n                    defaultChecked={\n                      account.role && account.role.some(i => i === \"ad\")\n                    }\n                    onChange={({ target: { checked } }) =>\n                      setRole(prev => ({ ...prev, ad: checked }))\n                    }\n                  />\n                  <Label check className=\"form-check-label\" htmlFor=\"Ad\">\n                    Ad\n                  </Label>\n                </FormGroup>\n                <FormGroup check className=\"checkbox\">\n                  <Input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"Support\"\n                    defaultChecked={\n                      account.role && account.role.some(i => i === \"support\")\n                    }\n                    onChange={({ target: { checked } }) =>\n                      setRole(prev => ({ ...prev, support: checked }))\n                    }\n                  />\n                  <Label check className=\"form-check-label\" htmlFor=\"Support\">\n                    Support\n                  </Label>\n                </FormGroup>\n              </Col>\n            </FormGroup> */}\n            <FormGroup row>\n              <Col md=\"12\">\n                <Label htmlFor=\"select\">Rank</Label>\n              </Col>\n              <Col xs=\"12\" md=\"12\">\n                <Input\n                  type=\"select\"\n                  name=\"select\"\n                  id=\"select\"\n                  value={account.rank}\n                  onChange={({ target: { value } }) =>\n                    setAccount(prev => ({ ...prev, rank: value }))\n                  }\n                >\n                  <option value=\"\">Please select</option>\n                  <option value=\"Bronze\">Bronze</option>\n                  <option value=\"Silver\">Silver</option>\n                  <option value=\"Gold\">Gold</option>\n                  <option value=\"Platinum\">Platinum</option>\n                  <option value=\"Diamond\">Diamond</option>\n                  <option value=\"Veteran\">Veteran</option>\n                  <option value=\"Master\">Master</option>\n                  <option value=\"Challenger\">Challenger</option>\n                </Input>\n              </Col>\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"Avatar\">Avatar </Label>\n              <small>(Url)</small>\n              <Input\n                type=\"text\"\n                id=\"Avatar\"\n                placeholder=\"https://pornhub.com/avatar/MariaOzawa\"\n                value={account.avatar}\n                onChange={({ target: { value } }) =>\n                  setAccount(prev => ({\n                    ...prev,\n                    avatar: value\n                  }))\n                }\n              />\n              {account.avatar && (\n                <>\n                  <br />\n                  <Label htmlFor=\"Avatar\">Preview </Label>\n                  <br />\n                  <CardImg\n                    src={account.avatar}\n                    alt=\"avatar\"\n                    style={{\n                      width: \"200px\",\n                      border: \"5px solid rgba(0,0,0, .4)\"\n                    }}\n                  />\n                </>\n              )}\n            </FormGroup>\n            <Row>\n              <Col col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n                <Button\n                  block\n                  color={isSave ? \"success\" : \"primary\"}\n                  disabled={isSave}\n                  onClick={updateProfile}\n                >\n                  {isSave ? \"Success ✓\" : \"Save\"}\n                </Button>\n              </Col>\n            </Row>\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\persol\\\\persol-lqmb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\persol\\\\persol-lqmb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\persol\\\\persol-lqmb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\persol\\\\persol-lqmb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\persol\\\\persol-lqmb\\\\src\\\\components\\\\Profile\\\\index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardBody, CardHeader, Col, FormGroup, Input, Label, Row, Button, CardImg } from \"reactstrap\";\nimport firebase from \"./../../config\";\nvar base64Matcher = new RegExp(\"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\");\n\nvar Profile = function Profile(_ref) {\n  var changeStatusProgress = _ref.changeStatusProgress,\n      changeState = _ref.changeState;\n  var ref = firebase.database();\n\n  var _useState = useState(JSON.parse(localStorage.getItem(\"account\") || \"{}\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      keyAccount = _useState4[0],\n      setKeyAccount = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isSave = _useState6[0],\n      setSave = _useState6[1];\n\n  useEffect(function () {\n    changeStatusProgress(true);\n    ref.ref(\"users\").orderByChild(\"username\").equalTo(account.username).on(\"value\", function (snapshot) {\n      if (snapshot.val() !== null) {\n        var _Object$values = Object.values(snapshot.val()),\n            _Object$values2 = _slicedToArray(_Object$values, 1),\n            acc = _Object$values2[0];\n\n        setAccount(acc);\n        setKeyAccount(Object.keys(snapshot.val()));\n      }\n\n      changeStatusProgress(false);\n    });\n  }, []);\n  useEffect(function () {\n    setSave(false);\n  }, [account]);\n\n  var updateProfile = function updateProfile() {\n    return _regeneratorRuntime.async(function updateProfile$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            changeStatusProgress(true);\n            ref.ref().child(\"/users/\" + keyAccount).update(account, function () {\n              setSave(true);\n              changeState(account);\n              changeStatusProgress(false);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var renderPointLane = function renderPointLane(lane) {\n    if (!account.role) return;\n    var p = account.role.findIndex(function (i) {\n      return i.toLowerCase() === lane.toLowerCase();\n    });\n    if (p !== -1) return 5 - p;\n  };\n\n  return React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xs: \"12\",\n    sm: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Profile\"), React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \" Form\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Label, {\n    htmlFor: \"company\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Username\"), React.createElement(Input, {\n    type: \"text\",\n    readOnly: true,\n    value: account.username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Label, {\n    htmlFor: \"Ingame\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Ingame\"), React.createElement(Input, {\n    type: \"text\",\n    id: \"Ingame\",\n    placeholder: \"PS.abcxyz\",\n    value: account.ingame,\n    onChange: function onChange(_ref2) {\n      var value = _ref2.target.value;\n      return setAccount(function (prev) {\n        return _objectSpread({}, prev, {\n          ingame: value\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Col, {\n    md: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Role\")), React.createElement(Col, {\n    md: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    check: true,\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: \"form-check-input\",\n    type: \"checkbox\",\n    id: \"Top\",\n    checked: account.role && account.role.some(function (i) {\n      return i === \"top\";\n    }),\n    onChange: function onChange(_ref3) {\n      var checked = _ref3.target.checked;\n      return setAccount(function (prev) {\n        return checked ? account.role && account.role.length ? _objectSpread({}, prev, {\n          role: [].concat(_toConsumableArray(account.role), [\"top\"])\n        }) : _objectSpread({}, prev, {\n          role: [\"top\"]\n        }) : _objectSpread({}, prev, {\n          role: _toConsumableArray(account.role).filter(function (i) {\n            return i !== \"top\";\n          })\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(Label, {\n    check: true,\n    className: \"form-check-label\",\n    htmlFor: \"Top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Top \", renderPointLane(\"Top\"))), React.createElement(FormGroup, {\n    check: true,\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: \"form-check-input\",\n    type: \"checkbox\",\n    id: \"Jungle\",\n    checked: account.role && account.role.some(function (i) {\n      return i === \"jungle\";\n    }),\n    onChange: function onChange(_ref4) {\n      var checked = _ref4.target.checked;\n      return setAccount(function (prev) {\n        return checked ? account.role && account.role.length ? _objectSpread({}, prev, {\n          role: [].concat(_toConsumableArray(account.role), [\"jungle\"])\n        }) : _objectSpread({}, prev, {\n          role: [\"jungle\"]\n        }) : _objectSpread({}, prev, {\n          role: _toConsumableArray(account.role).filter(function (i) {\n            return i !== \"jungle\";\n          })\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(Label, {\n    check: true,\n    className: \"form-check-label\",\n    htmlFor: \"Jungle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Jungle \", renderPointLane(\"Jungle\"))), React.createElement(FormGroup, {\n    check: true,\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: \"form-check-input\",\n    type: \"checkbox\",\n    id: \"Mid\",\n    checked: account.role && account.role.some(function (i) {\n      return i === \"mid\";\n    }),\n    onChange: function onChange(_ref5) {\n      var checked = _ref5.target.checked;\n      return setAccount(function (prev) {\n        return checked ? account.role && account.role.length ? _objectSpread({}, prev, {\n          role: [].concat(_toConsumableArray(account.role), [\"mid\"])\n        }) : _objectSpread({}, prev, {\n          role: [\"mid\"]\n        }) : _objectSpread({}, prev, {\n          role: _toConsumableArray(account.role).filter(function (i) {\n            return i !== \"mid\";\n          })\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), React.createElement(Label, {\n    check: true,\n    className: \"form-check-label\",\n    htmlFor: \"Mid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"Mid \", renderPointLane(\"Mid\"))), React.createElement(FormGroup, {\n    check: true,\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: \"form-check-input\",\n    type: \"checkbox\",\n    id: \"Ad\",\n    checked: account.role && account.role.some(function (i) {\n      return i === \"ad\";\n    }),\n    onChange: function onChange(_ref6) {\n      var checked = _ref6.target.checked;\n      return setAccount(function (prev) {\n        return checked ? account.role && account.role.length ? _objectSpread({}, prev, {\n          role: [].concat(_toConsumableArray(account.role), [\"ad\"])\n        }) : _objectSpread({}, prev, {\n          role: [\"ad\"]\n        }) : _objectSpread({}, prev, {\n          role: _toConsumableArray(account.role).filter(function (i) {\n            return i !== \"ad\";\n          })\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), React.createElement(Label, {\n    check: true,\n    className: \"form-check-label\",\n    htmlFor: \"Ad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"Ad \", renderPointLane(\"Ad\"))), React.createElement(FormGroup, {\n    check: true,\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: \"form-check-input\",\n    type: \"checkbox\",\n    id: \"Support\",\n    checked: account.role && account.role.some(function (i) {\n      return i === \"support\";\n    }),\n    onChange: function onChange(_ref7) {\n      var checked = _ref7.target.checked;\n      return setAccount(function (prev) {\n        return checked ? account.role && account.role.length ? _objectSpread({}, prev, {\n          role: [].concat(_toConsumableArray(account.role), [\"support\"])\n        }) : _objectSpread({}, prev, {\n          role: [\"support\"]\n        }) : _objectSpread({}, prev, {\n          role: _toConsumableArray(account.role).filter(function (i) {\n            return i !== \"support\";\n          })\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }), React.createElement(Label, {\n    check: true,\n    className: \"form-check-label\",\n    htmlFor: \"Support\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, \"Support \", renderPointLane(\"Support\"))))), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(Col, {\n    md: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(Label, {\n    htmlFor: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \"Rank\")), React.createElement(Col, {\n    xs: \"12\",\n    md: \"12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(Input, {\n    type: \"select\",\n    name: \"select\",\n    id: \"select\",\n    value: account.rank,\n    onChange: function onChange(_ref8) {\n      var value = _ref8.target.value;\n      return setAccount(function (prev) {\n        return _objectSpread({}, prev, {\n          rank: value\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, \"Please select\"), React.createElement(\"option\", {\n    value: \"Bronze\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, \"Bronze\"), React.createElement(\"option\", {\n    value: \"Silver\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, \"Silver\"), React.createElement(\"option\", {\n    value: \"Gold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, \"Gold\"), React.createElement(\"option\", {\n    value: \"Platinum\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, \"Platinum\"), React.createElement(\"option\", {\n    value: \"Diamond\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, \"Diamond\"), React.createElement(\"option\", {\n    value: \"Veteran\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, \"Veteran\"), React.createElement(\"option\", {\n    value: \"Master\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, \"Master\"), React.createElement(\"option\", {\n    value: \"Challenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"Challenger\")))), React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, React.createElement(Label, {\n    htmlFor: \"Avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, \"Avatar \"), React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, \"(Url)\"), React.createElement(Input, {\n    type: \"text\",\n    id: \"Avatar\",\n    placeholder: \"https://pornhub.com/avatar/MariaOzawa\",\n    value: account.avatar,\n    onChange: function onChange(_ref9) {\n      var value = _ref9.target.value;\n      return setAccount(function (prev) {\n        return _objectSpread({}, prev, {\n          avatar: value\n        });\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }), account.avatar && React.createElement(React.Fragment, null, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }), React.createElement(Label, {\n    htmlFor: \"Avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, \"Preview \"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }), React.createElement(CardImg, {\n    src: account.avatar,\n    alt: \"avatar\",\n    style: {\n      width: \"200px\",\n      border: \"5px solid rgba(0,0,0, .4)\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, React.createElement(Col, {\n    col: \"6\",\n    sm: \"4\",\n    md: \"2\",\n    className: \"mb-3 mb-xl-0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, React.createElement(Button, {\n    block: true,\n    color: isSave ? \"success\" : \"primary\",\n    disabled: isSave,\n    onClick: updateProfile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, isSave ? \"Success ✓\" : \"Save\")))))));\n};\n\nexport default Profile;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/persol/persol-lqmb/src/components/Profile/index.js"],"names":["React","useState","useEffect","Card","CardBody","CardHeader","Col","FormGroup","Input","Label","Row","Button","CardImg","firebase","base64Matcher","RegExp","Profile","changeStatusProgress","changeState","ref","database","JSON","parse","localStorage","getItem","account","setAccount","keyAccount","setKeyAccount","isSave","setSave","orderByChild","equalTo","username","on","snapshot","val","Object","values","acc","keys","updateProfile","child","update","renderPointLane","lane","role","p","findIndex","i","toLowerCase","ingame","value","target","prev","some","checked","length","filter","rank","avatar","width","border"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Row,\r\n  Button,\r\n  CardImg\r\n} from \"reactstrap\";\r\nimport firebase from \"./../../config\";\r\n\r\nconst base64Matcher = new RegExp(\"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\");\r\n\r\nconst Profile = ({ changeStatusProgress, changeState }) => {\r\n  const ref = firebase.database();\r\n  const [account, setAccount] = useState(\r\n    JSON.parse(localStorage.getItem(\"account\") || \"{}\")\r\n  );\r\n  const [keyAccount, setKeyAccount] = useState(\"\");\r\n  const [isSave, setSave] = useState(false);\r\n\r\n  useEffect(() => {\r\n    changeStatusProgress(true);\r\n    ref\r\n      .ref(\"users\")\r\n      .orderByChild(\"username\")\r\n      .equalTo(account.username)\r\n      .on(\"value\", snapshot => {\r\n        if (snapshot.val() !== null) {\r\n          const [acc] = Object.values(snapshot.val());\r\n          setAccount(acc);\r\n          setKeyAccount(Object.keys(snapshot.val()));\r\n        }\r\n        changeStatusProgress(false);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSave(false);\r\n  }, [account]);\r\n\r\n  const updateProfile = async () => {\r\n    changeStatusProgress(true);\r\n    ref\r\n      .ref()\r\n      .child(\"/users/\" + keyAccount)\r\n      .update(account, () => {\r\n        setSave(true);\r\n        changeState(account);\r\n        changeStatusProgress(false);\r\n      });\r\n  };\r\n\r\n  const renderPointLane = (lane) => {\r\n    if(!account.role) return;\r\n    const p = account.role.findIndex(i => i.toLowerCase() === lane.toLowerCase())\r\n    if(p !== -1) return 5 - p\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs=\"12\" sm=\"12\">\r\n        <Card>\r\n          <CardHeader>\r\n            <strong>Profile</strong>\r\n            <small> Form</small>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <FormGroup>\r\n              <Label htmlFor=\"company\">Username</Label>\r\n              <Input type=\"text\" readOnly={true} value={account.username} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label htmlFor=\"Ingame\">Ingame</Label>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"Ingame\"\r\n                placeholder=\"PS.abcxyz\"\r\n                value={account.ingame}\r\n                onChange={({ target: { value } }) =>\r\n                  setAccount(prev => ({\r\n                    ...prev,\r\n                    ingame: value\r\n                  }))\r\n                }\r\n              />\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Col md=\"12\">\r\n                <Label>Role</Label>\r\n              </Col>\r\n              <Col md=\"12\">\r\n                <FormGroup check className=\"checkbox\">\r\n                  <Input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"Top\"\r\n                    checked={\r\n                      account.role && account.role.some(i => i === \"top\")\r\n                    }\r\n                    onChange={({ target: { checked } }) =>\r\n                      setAccount(prev =>\r\n                        checked\r\n                          ? account.role && account.role.length\r\n                            ? ({ ...prev, role: [...account.role, \"top\"] })\r\n                            : ({ ...prev, role: [\"top\"] })\r\n                          : ({\r\n                              ...prev,\r\n                              role: [...account.role].filter(i => i !== \"top\")\r\n                            })\r\n                      )\r\n                    }\r\n                  />\r\n                  <Label check className=\"form-check-label\" htmlFor=\"Top\">\r\n                    Top {renderPointLane(\"Top\")}\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check className=\"checkbox\">\r\n                  <Input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"Jungle\"\r\n                    checked={\r\n                      account.role && account.role.some(i => i === \"jungle\")\r\n                    }\r\n                    onChange={({ target: { checked } }) =>\r\n                    setAccount(prev =>\r\n                        checked\r\n                          ? account.role && account.role.length\r\n                            ? ({ ...prev, role: [...account.role, \"jungle\"] })\r\n                            : ({ ...prev, role: [\"jungle\"] })\r\n                          : ({\r\n                              ...prev,\r\n                              role: [...account.role].filter(i => i !== \"jungle\")\r\n                            })\r\n                      )\r\n                    }\r\n                  />\r\n                  <Label check className=\"form-check-label\" htmlFor=\"Jungle\">\r\n                    Jungle {renderPointLane(\"Jungle\")}\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check className=\"checkbox\">\r\n                  <Input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"Mid\"\r\n                    checked={\r\n                      account.role && account.role.some(i => i === \"mid\")\r\n                    }\r\n                    onChange={({ target: { checked } }) =>\r\n                    setAccount(prev =>\r\n                        checked\r\n                          ? account.role && account.role.length\r\n                            ? ({ ...prev, role: [...account.role, \"mid\"] })\r\n                            : ({ ...prev, role: [\"mid\"] })\r\n                          : ({\r\n                              ...prev,\r\n                              role: [...account.role].filter(i => i !== \"mid\")\r\n                            })\r\n                      )\r\n                    }\r\n                  />\r\n                  <Label check className=\"form-check-label\" htmlFor=\"Mid\">\r\n                    Mid {renderPointLane(\"Mid\")}\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check className=\"checkbox\">\r\n                  <Input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"Ad\"\r\n                    checked={account.role && account.role.some(i => i === \"ad\")}\r\n                    onChange={({ target: { checked } }) =>\r\n                    setAccount(prev =>\r\n                        checked\r\n                          ? account.role && account.role.length\r\n                            ? ({ ...prev, role: [...account.role, \"ad\"] })\r\n                            : ({ ...prev, role: [\"ad\"] })\r\n                          : ({\r\n                              ...prev,\r\n                              role: [...account.role].filter(i => i !== \"ad\")\r\n                            })\r\n                      )\r\n                    }\r\n                  />\r\n                  <Label check className=\"form-check-label\" htmlFor=\"Ad\">\r\n                    Ad {renderPointLane(\"Ad\")}\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check className=\"checkbox\">\r\n                  <Input\r\n                    className=\"form-check-input\"\r\n                    type=\"checkbox\"\r\n                    id=\"Support\"\r\n                    checked={\r\n                      account.role && account.role.some(i => i === \"support\")\r\n                    }\r\n                    onChange={({ target: { checked } }) =>\r\n                        setAccount(prev =>\r\n                            checked\r\n                            ? account.role && account.role.length\r\n                                ? ({ ...prev, role: [...account.role, \"support\"] })\r\n                                : ({ ...prev, role: [\"support\"] })\r\n                            : ({\r\n                                ...prev,\r\n                                role: [...account.role].filter(i => i !== \"support\")\r\n                                })\r\n                        )\r\n                    }\r\n                  />\r\n                  <Label check className=\"form-check-label\" htmlFor=\"Support\">\r\n                    Support {renderPointLane(\"Support\")}\r\n                  </Label>\r\n                </FormGroup>\r\n              </Col>\r\n            </FormGroup>\r\n\r\n            <FormGroup row>\r\n              <Col md=\"12\">\r\n                <Label htmlFor=\"select\">Rank</Label>\r\n              </Col>\r\n              <Col xs=\"12\" md=\"12\">\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"select\"\r\n                  id=\"select\"\r\n                  value={account.rank}\r\n                  onChange={({ target: { value } }) =>\r\n                    setAccount(prev => ({ ...prev, rank: value }))\r\n                  }\r\n                >\r\n                  <option value=\"\">Please select</option>\r\n                  <option value=\"Bronze\">Bronze</option>\r\n                  <option value=\"Silver\">Silver</option>\r\n                  <option value=\"Gold\">Gold</option>\r\n                  <option value=\"Platinum\">Platinum</option>\r\n                  <option value=\"Diamond\">Diamond</option>\r\n                  <option value=\"Veteran\">Veteran</option>\r\n                  <option value=\"Master\">Master</option>\r\n                  <option value=\"Challenger\">Challenger</option>\r\n                </Input>\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label htmlFor=\"Avatar\">Avatar </Label>\r\n              <small>(Url)</small>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"Avatar\"\r\n                placeholder=\"https://pornhub.com/avatar/MariaOzawa\"\r\n                value={account.avatar}\r\n                onChange={({ target: { value } }) =>\r\n                  setAccount(prev => ({\r\n                    ...prev,\r\n                    avatar: value\r\n                  }))\r\n                }\r\n              />\r\n              {account.avatar && (\r\n                <>\r\n                  <br />\r\n                  <Label htmlFor=\"Avatar\">Preview </Label>\r\n                  <br />\r\n                  <CardImg\r\n                    src={account.avatar}\r\n                    alt=\"avatar\"\r\n                    style={{\r\n                      width: \"200px\",\r\n                      border: \"5px solid rgba(0,0,0, .4)\"\r\n                    }}\r\n                  />\r\n                </>\r\n              )}\r\n            </FormGroup>\r\n            <Row>\r\n              <Col col=\"6\" sm=\"4\" md=\"2\" className=\"mb-3 mb-xl-0\">\r\n                <Button\r\n                  block\r\n                  color={isSave ? \"success\" : \"primary\"}\r\n                  disabled={isSave}\r\n                  onClick={updateProfile}\r\n                >\r\n                  {isSave ? \"Success ✓\" : \"Save\"}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"]},"metadata":{},"sourceType":"module"}
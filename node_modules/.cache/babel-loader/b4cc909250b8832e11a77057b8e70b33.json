{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _regeneratorRuntime = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar filter_1 = require(\"./filter\");\n\nvar CallCredentialsFilter =\n/*#__PURE__*/\nfunction (_filter_1$BaseFilter) {\n  _inherits(CallCredentialsFilter, _filter_1$BaseFilter);\n\n  function CallCredentialsFilter(channel, stream) {\n    var _this;\n\n    _classCallCheck(this, CallCredentialsFilter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CallCredentialsFilter).call(this));\n    _this.channel = channel;\n    _this.stream = stream;\n    _this.channel = channel;\n    _this.stream = stream;\n    var splitPath = stream.getMethod().split('/');\n    var serviceName = '';\n    /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n     * by '/', the first item should be empty and the second should be the\n     * service name */\n\n    if (splitPath.length >= 2) {\n      serviceName = splitPath[1];\n    }\n    /* Currently, call credentials are only allowed on HTTPS connections, so we\n     * can assume that the scheme is \"https\" */\n\n\n    _this.serviceUrl = \"https://\".concat(stream.getHost(), \"/\").concat(serviceName);\n    return _this;\n  }\n\n  _createClass(CallCredentialsFilter, [{\n    key: \"sendMetadata\",\n    value: function () {\n      var _sendMetadata = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(metadata) {\n        var credentials, credsMetadata, resultMetadata;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                credentials = this.stream.getCredentials();\n                credsMetadata = credentials.generateMetadata({\n                  service_url: this.serviceUrl\n                });\n                _context.next = 4;\n                return metadata;\n\n              case 4:\n                resultMetadata = _context.sent;\n                _context.t0 = resultMetadata;\n                _context.next = 8;\n                return credsMetadata;\n\n              case 8:\n                _context.t1 = _context.sent;\n\n                _context.t0.merge.call(_context.t0, _context.t1);\n\n                return _context.abrupt(\"return\", resultMetadata);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sendMetadata(_x) {\n        return _sendMetadata.apply(this, arguments);\n      }\n\n      return sendMetadata;\n    }()\n  }]);\n\n  return CallCredentialsFilter;\n}(filter_1.BaseFilter);\n\nexports.CallCredentialsFilter = CallCredentialsFilter;\n\nvar CallCredentialsFilterFactory =\n/*#__PURE__*/\nfunction () {\n  function CallCredentialsFilterFactory(channel) {\n    _classCallCheck(this, CallCredentialsFilterFactory);\n\n    this.channel = channel;\n    this.channel = channel;\n  }\n\n  _createClass(CallCredentialsFilterFactory, [{\n    key: \"createFilter\",\n    value: function createFilter(callStream) {\n      return new CallCredentialsFilter(this.channel, callStream);\n    }\n  }]);\n\n  return CallCredentialsFilterFactory;\n}();\n\nexports.CallCredentialsFilterFactory = CallCredentialsFilterFactory;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar _classCallCheck = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/maidat/Desktop/team-lq/persol-lqmb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar protobuf = require(\"protobufjs\");\n\nvar FallbackErrorDecoder =\n/*#__PURE__*/\nfunction () {\n  function FallbackErrorDecoder() {\n    _classCallCheck(this, FallbackErrorDecoder);\n\n    var errorProtoJson = require('../../protos/status.json');\n\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n  }\n\n  _createClass(FallbackErrorDecoder, [{\n    key: \"decodeProtobufAny\",\n    value: function decodeProtobufAny(anyValue) {\n      var match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n\n      if (!match) {\n        throw new Error(\"Unknown type encoded in google.protobuf.any: \".concat(anyValue.type_url));\n      }\n\n      var typeName = match[1];\n      var type = this.root.lookupType(typeName);\n\n      if (!type) {\n        throw new Error(\"Cannot lookup type \".concat(typeName));\n      }\n\n      return type.decode(anyValue.value);\n    } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n  }, {\n    key: \"decodeRpcStatus\",\n    value: function decodeRpcStatus(buffer) {\n      var _this = this;\n\n      var uint8array = new Uint8Array(buffer);\n      var status = this.statusType.decode(uint8array); // google.rpc.Status contains an array of google.protobuf.Any\n      // which need a special treatment\n\n      var result = {\n        code: status.code,\n        message: status.message,\n        details: status.details.map(function (detail) {\n          return _this.decodeProtobufAny(detail);\n        })\n      };\n      return result;\n    }\n  }]);\n\n  return FallbackErrorDecoder;\n}();\n\nexports.FallbackErrorDecoder = FallbackErrorDecoder;","map":null,"metadata":{},"sourceType":"script"}
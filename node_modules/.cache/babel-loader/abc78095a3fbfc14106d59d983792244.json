{"ast":null,"code":"'use strict';\n/* eslint global-require: 0 */\n// the code is structured this way so that bundlers can\n// alias out `has-symbols` to `() => true` or `() => false` if your target\n// environments' Symbol capabilities are known, and then use\n// dead code elimination on the rest of this module.\n//\n// Similarly, `isarray` can be aliased to `Array.isArray` if\n// available in all target environments.\n\nvar isArguments = require('is-arguments');\n\nif (require('has-symbols')() || require('has-symbols/shams')()) {\n  var $iterator = Symbol.iterator; // Symbol is available natively or shammed\n  // natively:\n  //  - Chrome >= 38\n  //  - Edge 12-14?, Edge >= 15 for sure\n  //  - FF >= 36\n  //  - Safari >= 9\n  //  - node >= 0.12\n\n  module.exports = function getIterator(iterable) {\n    // alternatively, `iterable[$iterator]?.()`\n    if (iterable != null && typeof iterable[$iterator] !== 'undefined') {\n      return iterable[$iterator]();\n    }\n\n    if (isArguments(iterable)) {\n      // arguments objects lack Symbol.iterator\n      // - node 0.12\n      return Array.prototype[$iterator].call(iterable);\n    }\n  };\n} else {\n  // Symbol is not available, native or shammed\n  var isArray = require('isarray');\n\n  var isString = require('is-string');\n\n  var GetIntrinsic = require('es-abstract/GetIntrinsic');\n\n  var $Map = GetIntrinsic('%Map%', true);\n  var $Set = GetIntrinsic('%Set%', true);\n\n  var callBound = require('es-abstract/helpers/callBound');\n\n  var $arrayPush = callBound('Array.prototype.push');\n  var $charCodeAt = callBound('String.prototype.charCodeAt');\n  var $stringSlice = callBound('String.prototype.slice');\n\n  var advanceStringIndex = function advanceStringIndex(S, index) {\n    var length = S.length;\n\n    if (index + 1 >= length) {\n      return index + 1;\n    }\n\n    var first = $charCodeAt(S, index);\n\n    if (first < 0xD800 || first > 0xDBFF) {\n      return index + 1;\n    }\n\n    var second = $charCodeAt(S, index + 1);\n\n    if (second < 0xDC00 || second > 0xDFFF) {\n      return index + 1;\n    }\n\n    return index + 2;\n  };\n\n  var getArrayIterator = function getArrayIterator(arraylike) {\n    var i = 0;\n    return {\n      next: function next() {\n        var done = i >= arraylike.length;\n        var value;\n\n        if (!done) {\n          value = arraylike[i];\n          i += 1;\n        }\n\n        return {\n          done: done,\n          value: value\n        };\n      }\n    };\n  };\n\n  var getNonCollectionIterator = function getNonCollectionIterator(iterable) {\n    if (isArray(iterable) || isArguments(iterable)) {\n      return getArrayIterator(iterable);\n    }\n\n    if (isString(iterable)) {\n      var i = 0;\n      return {\n        next: function next() {\n          var nextIndex = advanceStringIndex(iterable, i);\n          var value = $stringSlice(iterable, i, nextIndex);\n          i = nextIndex;\n          return {\n            done: nextIndex > iterable.length,\n            value: value\n          };\n        }\n      };\n    }\n  };\n\n  if (!$Map && !$Set) {\n    // the only language iterables are Array, String, arguments\n    // - Safari <= 6.0\n    // - Chrome < 38\n    // - node < 0.12\n    // - FF < 13\n    // - IE < 11\n    // - Edge < 11\n    module.exports = getNonCollectionIterator;\n  } else {\n    // either Map or Set are available, but Symbol is not\n    // - es6-shim on an ES5 browser\n    // - Safari 6.2 (maybe 6.1?)\n    // - FF v[13, 36)\n    // - IE 11\n    // - Edge 11\n    // - Safari v[6, 9)\n    var isMap = require('is-map');\n\n    var isSet = require('is-set'); // Firefox >= 27, IE 11, Safari 6.2 - 9, Edge 11, es6-shim in older envs, all have forEach\n\n\n    var $mapForEach = callBound('Map.prototype.forEach', true);\n    var $setForEach = callBound('Set.prototype.forEach', true);\n\n    if (typeof process === 'undefined' || !process.versions || !process.versions.node) {\n      // \"if is not node\"\n      // Firefox 17 - 26 has `.iterator()`, whose iterator `.next()` either\n      // returns a value, or throws a StopIteration object. These browsers\n      // do not have any other mechanism for iteration.\n      var $mapIterator = callBound('Map.prototype.iterator', true);\n      var $setIterator = callBound('Set.prototype.iterator', true);\n\n      var getStopIterationIterator = function getStopIterationIterator(iterator) {\n        var done = false;\n        return {\n          next: function next() {\n            try {\n              return {\n                done: done,\n                value: done ? undefined : iterator.next()\n              };\n            } catch (e) {\n              done = true;\n              return {\n                done: true,\n                value: undefined\n              };\n            }\n          }\n        };\n      };\n    } // Firefox 27-35, and some older es6-shim versions, use a string \"@@iterator\" property\n    // this returns a proper iterator object, so we should use it instead of forEach.\n    // newer es6-shim versions use a string \"_es6-shim iterator_\" property.\n\n\n    var $mapAtAtIterator = callBound('Map.prototype.@@iterator', true) || callBound('Map.prototype._es6-shim iterator_', true);\n    var $setAtAtIterator = callBound('Set.prototype.@@iterator', true) || callBound('Set.prototype._es6-shim iterator_', true);\n\n    var getCollectionIterator = function getCollectionIterator(iterable) {\n      if (isMap(iterable)) {\n        if ($mapIterator) {\n          return getStopIterationIterator($mapIterator(iterable));\n        }\n\n        if ($mapAtAtIterator) {\n          return $mapAtAtIterator(iterable);\n        }\n\n        if ($mapForEach) {\n          var entries = [];\n          $mapForEach(iterable, function (v, k) {\n            $arrayPush(entries, [k, v]);\n          });\n          return getArrayIterator(entries);\n        }\n      }\n\n      if (isSet(iterable)) {\n        if ($setIterator) {\n          return getStopIterationIterator($setIterator(iterable));\n        }\n\n        if ($setAtAtIterator) {\n          return $setAtAtIterator(iterable);\n        }\n\n        if ($setForEach) {\n          var values = [];\n          $setForEach(iterable, function (v) {\n            $arrayPush(values, v);\n          });\n          return getArrayIterator(values);\n        }\n      }\n    };\n\n    module.exports = function getIterator(iterable) {\n      return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
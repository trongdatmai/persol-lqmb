{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* In these functions we assume the input came from a JSON object. Therefore we\n * expect that the prototype is uninteresting and that `in` can be used\n * effectively */\n\nfunction validateXdsConfig(xds) {\n  if (!('balancerName' in xds) || typeof xds.balancerName !== 'string') {\n    throw new Error('Invalid xds config: invalid balancerName');\n  }\n\n  var xdsConfig = {\n    balancerName: xds.balancerName,\n    childPolicy: [],\n    fallbackPolicy: []\n  };\n\n  if ('childPolicy' in xds) {\n    if (!Array.isArray(xds.childPolicy)) {\n      throw new Error('Invalid xds config: invalid childPolicy');\n    }\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = xds.childPolicy[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var policy = _step.value;\n        xdsConfig.childPolicy.push(validateConfig(policy));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  if ('fallbackPolicy' in xds) {\n    if (!Array.isArray(xds.fallbackPolicy)) {\n      throw new Error('Invalid xds config: invalid fallbackPolicy');\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = xds.fallbackPolicy[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var _policy = _step2.value;\n        xdsConfig.fallbackPolicy.push(validateConfig(_policy));\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  return xdsConfig;\n}\n\nfunction validateGrpcLbConfig(grpclb) {\n  var grpcLbConfig = {\n    childPolicy: []\n  };\n\n  if ('childPolicy' in grpclb) {\n    if (!Array.isArray(grpclb.childPolicy)) {\n      throw new Error('Invalid xds config: invalid childPolicy');\n    }\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = grpclb.childPolicy[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var policy = _step3.value;\n        grpcLbConfig.childPolicy.push(validateConfig(policy));\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  }\n\n  return grpcLbConfig;\n}\n\nfunction validateConfig(obj) {\n  if ('round_robin' in obj) {\n    if ('xds' in obj || 'grpclb' in obj) {\n      throw new Error('Multiple load balancing policies configured');\n    }\n\n    if (obj['round_robin'] instanceof Object) {\n      return {\n        round_robin: {}\n      };\n    }\n  }\n\n  if ('xds' in obj) {\n    if ('grpclb' in obj) {\n      throw new Error('Multiple load balancing policies configured');\n    }\n\n    return {\n      xds: validateXdsConfig(obj.xds)\n    };\n  }\n\n  if ('grpclb' in obj) {\n    return {\n      grpclb: validateGrpcLbConfig(obj.grpclb)\n    };\n  }\n\n  throw new Error('No recognized load balancing policy configured');\n}\n\nexports.validateConfig = validateConfig;","map":null,"metadata":{},"sourceType":"script"}